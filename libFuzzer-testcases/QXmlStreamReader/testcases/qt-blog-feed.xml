<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Qt Blog</title>
	<atom:link href="http://blog.qt.io/feed/" rel="self" type="application/rss+xml" />
	<link>http://blog.qt.io</link>
	<description>For Developers by Developers</description>
	<lastBuildDate>Wed, 12 Oct 2016 09:08:52 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Qt 5.6.2 Released</title>
		<link>http://blog.qt.io/blog/2016/10/12/qt-5-6-2-released/</link>
		<comments>http://blog.qt.io/blog/2016/10/12/qt-5-6-2-released/#comments</comments>
		<pubDate>Wed, 12 Oct 2016 09:08:52 +0000</pubDate>
		<dc:creator><![CDATA[Tuukka Turunen]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45828</guid>
		<description><![CDATA[<p>I am please to inform that Qt 5.6.2 has been released today. This is the second patch release to the long-term supported Qt 5.6, and there will still be more patch releases to come. While a patch release does not bring new features, it contains security fixes, error corrections and general improvements. The Qt 5.6.2</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/12/qt-5-6-2-released/">Qt 5.6.2 Released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>I am please to inform that Qt 5.6.2 has been released today. This is the second patch release to the long-term supported Qt 5.6, and there will still be more patch releases to come. While a patch release does not bring new features, it contains security fixes, error corrections and general improvements.</p>
<p>The Qt 5.6.2 patch release continues the quality and maturity focus of Qt 5.6, bringing close to 900 improvements on top of the already solid Qt 5.6.1 release. These bug fixes and improvements are also available in the later releases of Qt including the upcoming Qt 5.7.1 and 5.8.0 releases. Qt 5.6.2 is well suited for users that can not upgrade to a later version of Qt, for example due to dependency to C++98 compiler.</p>
<p>For details of the most important improvements and bug fixes in Qt 5.6.2, please check <a href="http://wiki.qt.io/Qt_5.6.2_Change_Files" target="_blank">the change logs for each module</a>.</p>
<p>If you are using the online installer, Qt 5.6.2 can be updated using the maintenance tool. Offline packages are available for commercial users in <a href="https://login.qt.io" target="_blank">the Qt Account portal</a> and at the qt.io <a href="https://www.qt.io/download/" target="_blank">Download page</a> for open-source users.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/12/qt-5-6-2-released/">Qt 5.6.2 Released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/10/12/qt-5-6-2-released/feed/</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>Make It Magic &#8211; User Experience and the Internet of Things</title>
		<link>http://blog.qt.io/blog/2016/10/11/make-it-magic-user-experience-and-the-internet-of-things/</link>
		<comments>http://blog.qt.io/blog/2016/10/11/make-it-magic-user-experience-and-the-internet-of-things/#comments</comments>
		<pubDate>Tue, 11 Oct 2016 15:21:17 +0000</pubDate>
		<dc:creator><![CDATA[Josh Clark, UX Strategist &#38; Founder, Big Medium]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Internet of Things]]></category>
		<category><![CDATA[UI]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45984</guid>
		<description><![CDATA[<p>Our interfaces are leaping off screens and onto our bodies, into our living rooms, and steadily into the most intimate spaces of our lives. There’s huge opportunity here, but also significant risk. Will the technology bend to our lives, or will it be the reverse? With a word or a gesture, we’re now able to</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/11/make-it-magic-user-experience-and-the-internet-of-things/">Make It Magic &#8211; User Experience and the Internet of Things</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><em>Our interfaces are leaping off screens and onto our bodies, into our living rooms, and steadily into the most intimate spaces of our lives. There’s huge opportunity here, but also significant risk. Will the technology bend to our lives, or will it be the reverse?</em></p>
<p>With a word or a gesture, we’re now able to summon invisible forces to do our bidding. Back in the day, they called these spells. Today, we call them user interfaces and digital systems. Somehow, though, we’ve lost something essential in that shift from fantasy to science fiction.</p>
<p>As technologists, we tend to be overly enamored of our technology. For us, the device too often becomes the end goal, and we lose track of the genuine human need that we might otherwise meet. We talk about “technology solutions” but lose track of the problem we’re trying to solve (or we create entirely new ones). A subtle shift in perspective will help us build the right things: let’s stop aiming to invent science fiction and start making magic instead.</p>
<p>Centuries of myth and legend have given us the design patterns for what happens when we light up everyday objects with magical powers: magic mirrors, shoes, rings, cloaks, food, you name it. We finally have the science to actually do it, but we haven’t connected these emerging products back to these timeless stories—and to what they tell us about human wants and needs.</p>
<p>The best kind of magic makes an object even more of what it already is: a bag that can hold an impossible amount, eyeglasses that can see anywhere, a flute that plays irresistible music. The appeal of the story is not in the materials or the enabling technology, but how the magic amplifies what we most want or love about the object itself (and often, ourselves).</p>
<p>How can we bring the same approach to the smart home? How can we use technology not to “disrupt” the home, but to make it _more_ of the home we already love? How can technology help to reinforce the home as a calm oasis, a place to connect with family and friends? Connected isn’t always smart, and smart isn’t always good. We have to meet a real human need. Let’s do more than just make things talk; let’s improve the conversation.</p>
<p>In my Qt World Summit talk, <a href="https://www.qtworldsummit.com/sessions/magical-ux-and-the-internet-of-things/">Magical UX and the Internet of Things</a>, I’ll share the perspective I’ve been applying to my product work lately. I no longer look at the tech around me and ask, “what can I build with this technology” or “what if I strap these sensors and processors onto your body?” Instead, I’ve started looking at everyday objects and asking questions like, “what if these glasses (or this mirror, or this ring) were magic?” Changing that starting question has led my design work down a very different product path, less focused on engineering and technology, and more on basic human wants and desires.</p>
<p>My product work has turned asthma inhalers into protective talismans and watches into magic amulets. In the end, they’re still enabled by familiar technology, but they’re animated by a design approach that builds on existing behaviors and contexts—and essential human needs.</p>
<p>New kinds of interfaces require new kinds of thinking. Starting from a place of magic gives us permission as designers and engineers to let go of old, screen-based habits, and create things that genuinely delight and amaze.</p>
<p><iframe width="500" height="281" src="https://www.youtube.com/embed/Rd45x5GvlAE?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p><strong>I hope to see you in San Francisco at Qt World Summit 2016 &#8212; </strong><a href="https://www.qtworldsummit.com/#tile_registration_anchor"><strong>Register now</strong></a><strong>.</strong></p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/11/make-it-magic-user-experience-and-the-internet-of-things/">Make It Magic &#8211; User Experience and the Internet of Things</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/10/11/make-it-magic-user-experience-and-the-internet-of-things/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Qt Quick Controls 2.1 and Beyond</title>
		<link>http://blog.qt.io/blog/2016/10/06/qt-quick-controls-2-1-and-beyond/</link>
		<comments>http://blog.qt.io/blog/2016/10/06/qt-quick-controls-2-1-and-beyond/#comments</comments>
		<pubDate>Thu, 06 Oct 2016 12:07:05 +0000</pubDate>
		<dc:creator><![CDATA[J-P Nurmi]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt Quick Controls]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45239</guid>
		<description><![CDATA[<p>As most of you already know, Qt Quick Controls allow you to save time developing user interfaces by utilizing a library of ready-made controls with different styles which you also can easily customize to your liking. The Qt Quick Controls 2 module delivers the next generation UI controls with a great performance boost. The feature</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/06/qt-quick-controls-2-1-and-beyond/">Qt Quick Controls 2.1 and Beyond</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>As most of you already know, Qt Quick Controls allow you to save time developing user interfaces by utilizing a library of ready-made controls with different styles which you also can easily customize to your liking. The Qt Quick Controls 2 module delivers the next generation UI controls with a great performance boost.</p>
<p>The feature freeze of Qt 5.8 was a while back, and the 5.8 beta release is being prepared as we speak. Let&#8217;s take a brief look at what&#8217;s coming in Qt Quick Controls 2.1 in Qt 5.8.</p>
<p>In the first release of Qt Quick Controls 2, we made a deliberate choice to focus on the areas that the first generation Qt Quick Controls were not able to serve well: embedded and mobile. The next release introduces a few features that improve the behavior of the new controls on traditional desktop platforms.</p>
<h4>Hover Effects</h4>
<p>Hover effects have been one of the most popular <a href="https://bugreports.qt.io/browse/QTBUG-50003" target="_blank">feature requests</a>. We have had the enablers already in place, meaning that it has been possible to implement hover effects for your own custom controls and styles, but the hover effects for the built-in styles did not make it to the first release. I&#8217;m happy to announce that the Material and Universal styles have gained hover effects in Qt 5.8. This alone makes the controls more pleasant to use on platforms with a mouse pointer. Check the following video to see how the Universal style hover effects look.</p>
<p><iframe width="500" height="375" src="https://www.youtube.com/embed/43HrMH379-E?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<h4>Ripple Effects</h4>
<p>While working on the hover effects, it became apparent that we would also like to have ripple effects for the Material style. Take a look at the following screencast to see what we have cooked up.</p>
<p><iframe width="500" height="375" src="https://www.youtube.com/embed/12F3JSxUMfY?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<h4>System Theme</h4>
<p>We have also introduced a new theme option for the Material and Universal styles. The new theme is called <em>System</em>, and it simply resolves to either the light or dark theme based on the system theme colors. This feature is opt-in, because it typically takes some extra consideration to make applications look good in both light and dark themes. For example, if you use icons in your application, you may have to ship both light and dark versions.</p>
<h4>Platform Types</h4>
<p>Another thing we have been working on is a new module that provides a set of experimental <a href="http://doc-snapshots.qt.io/qt5-5.8/qtlabsplatform-index.html" target="_blank">&#8220;platform&#8221; types</a>. These QML types are light-weight wrappers for the native menu, menubar, standard dialog, and system tray icon implementations provided by the <em>Qt Platform Abstraction</em> layer. For the time being, since not all platforms have implementations of all of these native types in place, <em>Qt Widgets</em> are used as a fallback when a native implementation is not available. The platform types integrate seamlessly with Qt Quick, but unlike the heavily customizable Qt Quick Controls, the platform types are not customizable using Qt Quick primitives. Inspired by the good old example by the same name in Qt Quick Controls 1, we have implemented a new <a href="http://doc-snapshots.qt.io/qt5-5.8/qtquickcontrols2-texteditor-example.html" target="_blank">Text Editor example</a> that offers a modernized look&#8217;n&#8217;feel and showcases the platform types.</p>
<p><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/10/qtquickcontrols2-texteditor-desktop.png" alt="Qt Quick Controls 2 - Text Editor example (Desktop UI)" /></p>
<h4>New Controls</h4>
<p>There are a few new QML types in the core Qt Quick Controls 2 offering too. While we were implementing the Text Editor example, we realized that it would be nice to have ready-made separators that play nice with the built-in styles and themes. We ended up introducing MenuSeparator and ToolSeparator, that are designed to be used in Menu and ToolBar, respectively.</p>
<p>We have also added a new Dialog popup that offers the same convenient &#8220;header-content-footer&#8221; layout found in ApplicationWindow and Page. Dialog uses DialogButtonBox, which is also offered as a standalone type, to let you configure a set of standard buttons in a breeze.</p>
<p><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/10/qtquickcontrols2-dialogs.png" alt="Qt Quick Controls 2 - Dialogs" /></p>
<p>Last but not least, our latest family member is RoundButton. Customizing Button to have a round background was a popular question on various forums. Even though it is straight-forward to customize the background, it means losing the default background, which looks different for different styles. We decided to offer a control that does this out of the box. The Material style version of RoundButton supports elevation, so it can be easily used to create a <a href="https://material.google.com/components/buttons-floating-action-button.html" target="_blank">Floating Action Button</a>. We have used RoundButton in the touch UI of the Text Editor example for triggering the edit mode.</p>
<p><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/10/qtquickcontrols2-texteditor-touch.png" alt="Qt Quick Controls 2 - Text Editor example (Touch UI)" /></p>
<h4>What&#8217;s Next?</h4>
<p>Qt Quick Controls 2 already offers many features Qt Quick Controls 1 never had, but there are still a few smaller and larger features that are, in comparison to the old set, still missing from the new controls. We don&#8217;t have an exact time schedule to offer for each feature, but we&#8217;ll continue catching up with the rest, version by version. For example, <a href="https://bugreports.qt.io/browse/QTBUG-53876" target="_blank">editable ComboBox</a> is something that we have already started working on, and if everything goes well, it is going to be introduced in Qt Quick Controls 2.2 in Qt 5.9. Some notable missing features from Qt Quick Controls 1 are <a href="https://bugreports.qt.io/browse/QTBUG-50705" target="_blank">Action</a>, <a href="https://bugreports.qt.io/browse/QTBUG-56318" target="_blank">SplitView</a>, <a href="https://bugreports.qt.io/browse/QTBUG-51710" target="_blank">TableView</a>, and TreeView.</p>
<p>Other items on the wish-list are <a href="https://bugreports.qt.io/browse/QTBUG-51167" target="_blank">Pickers</a>, <a href="https://bugreports.qt.io/browse/QTBUG-51008" target="_blank">SegmentedButton</a>, <a href="https://bugreports.qt.io/browse/QTBUG-53169" target="_blank">persistent Drawer</a>, floating/transient headers and footers, action bar, pull-to-refresh, multi-touch support, perhaps some new styles&#8230; well, a lot of things. We won&#8217;t run out of ideas for a while. 🙂 If you have some other great ideas, please don&#8217;t hesitate to <a href="https://bugreports.qt.io" target="_blank">send us a suggestion</a>!</p>
<p>In other news, Mitch and I are delivering an online presentation about Qt Quick Controls 2.1 on October 11th. <a href="http://info.qt.io/webinar-tips-and-tricks-with-qt-quick-controls-2-1">Register</a> for the webinar today to learn more!</p>
<p>At the Qt World Summit, there will be two presentations related to Qt Quick Controls 2. Shawn will be talking about <a href="http://www.qtworldsummit.com/sessions/developing-user-interfaces-with-qt-quick-controls-2/" target="_blank">developing user interfaces with Qt Quick Controls 2</a>, and Ekke is going to present how he built the <a href="http://www.qtworldsummit.com/sessions/qt-world-summit-conference-app-behind-the-scenes/" target="_blank">Qt World Summit Conference App</a> using Qt Quick Controls 2.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/06/qt-quick-controls-2-1-and-beyond/">Qt Quick Controls 2.1 and Beyond</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/10/06/qt-quick-controls-2-1-and-beyond/feed/</wfw:commentRss>
		<slash:comments>40</slash:comments>
		</item>
		<item>
		<title>Customizable vector maps with the Mapbox Qt SDK</title>
		<link>http://blog.qt.io/blog/2016/10/04/customizable-vector-maps-with-the-mapbox-qt-sdk/</link>
		<comments>http://blog.qt.io/blog/2016/10/04/customizable-vector-maps-with-the-mapbox-qt-sdk/#comments</comments>
		<pubDate>Tue, 04 Oct 2016 12:12:13 +0000</pubDate>
		<dc:creator><![CDATA[Bruno Abinader, Software Engineer, Mapbox]]></dc:creator>
				<category><![CDATA[Biz Circuit & Dev Loop]]></category>
		<category><![CDATA[Contributors]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Yocto]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45965</guid>
		<description><![CDATA[<p>Mapbox is a mapping platform that makes it easy to integrate location into any mobile and online application. We are pleased to showcase the Mapbox Qt SDK as a target platform for our open source vector maps rendering engine. Our Qt SDK is a key component in Mapbox Drive, the first lane guidance map designed</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/04/customizable-vector-maps-with-the-mapbox-qt-sdk/">Customizable vector maps with the Mapbox Qt SDK</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Mapbox is a mapping platform that makes it easy to integrate location into any mobile and online application. We are pleased to showcase the <a href="https://www.mapbox.com/blog/qt-framework-support/">Mapbox Qt SDK</a> as a target platform for our open source vector maps rendering engine. Our Qt SDK is a key component in <a href="https://www.mapbox.com/blog/drive/">Mapbox Drive</a>, the first lane guidance map designed for car companies to control the in-car experience. The Qt SDK also brings high quality, OpenGL accelerated and <a href="https://www.mapbox.com/mapbox-studio/">customizable</a> maps to Qt native and QtQuick.</p>
<table>
<thead>
<tr>
<th align="center">QML: Properties</th>
<th align="center">QML: Runtime style</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://cloud.githubusercontent.com/assets/76133/17178235/4c66e6f8-541d-11e6-8d8b-36e4e6cbaf55.gif" target="_blank"><img src="https://cloud.githubusercontent.com/assets/76133/17178235/4c66e6f8-541d-11e6-8d8b-36e4e6cbaf55.gif" alt="QMLProperties" /></a></td>
<td align="center"><a href="https://cloud.githubusercontent.com/assets/76133/17176276/8ac459d4-5414-11e6-8def-93ee9f1ab93d.gif" target="_blank"><img src="https://cloud.githubusercontent.com/assets/76133/17176276/8ac459d4-5414-11e6-8def-93ee9f1ab93d.gif" alt="QMLRuntimeStyle" /></a></td>
</tr>
</tbody>
</table>
<p>The combination of <a href="https://www.mapbox.com/blog/native-gl-yocto/">Qt and Yocto</a> is perfect for bringing our maps to a whole series of embedded devices, ranging from professional NVIDIA and i.MX6 based boards to the popular Raspberry Pi 3.</p>
<p>As part of our <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/qt">Mapbox Qt SDK</a>, we expose Mapbox GL to Qt in two separate APIs:</p>
<ul>
<li>QMapboxGL &#8211; implements a C++03x-conformant API that has been tested from Qt 4.7 onwards (Travis CI currently builds it using both Qt 4 and Qt 5).</li>
<li>QQuickMapboxGL &#8211; implements a Qt Quick (QML) item that can be added to a scene. Because <code>QQuickFramebufferObject</code>has been added in Qt version 5.2, we support this API from this version onwards. The QML item interface matches the <a href="http://doc.qt.io/qt-5/qml-qtlocation-map.html">Qt Map QML type</a> almost entirely, making it easy to exchange from the upstream solution.</li>
</ul>
<p><em>QMapboxGL</em> and <em>QQuickMapboxGL</em> solve different problems. The former is backwards-compatible with previous versions of Qt and is easily integrated into pure C++ environments. The latter takes advantage of Qt Quick&#8217;s modern user interface technology, and is the perfect tool for adding navigation maps on embedded platforms. So far we have been testing our code on Linux and macOS desktops, as well as on Linux based embedded devices.</p>
<p>Mapbox is on a joint effort with the Qt Company to make the Mapbox Qt SDK also available through the official Qt Location module &#8211; we are aligning APIs to make sure Mapbox-specific features like runtime styles are available.</p>
<p><em>QQuickMapboxGL</em> API matches <a href="http://doc.qt.io/qt-5/qml-qtlocation-map.html">Qt&#8217;s Map QML Type</a>, as you can see from the example below:</p>
<div class="highlight highlight-source-qml">
<pre><span class="pl-k">import</span> <span class="pl-en">QtPositioning</span> <span class="pl-c1">5.0</span> 
<span class="pl-k">import</span> <span class="pl-en">QtQuick</span> <span class="pl-c1">2.0</span> 
<span class="pl-k">import</span> <span class="pl-en">QtQuick.Controls</span> <span class="pl-c1">1.0</span> 

<span class="pl-k">import</span> <span class="pl-en">QQuickMapboxGL</span> <span class="pl-c1">1.0</span> 

<span class="pl-c1">ApplicationWindow</span> {
    width<span class="pl-k">:</span> <span class="pl-c1">640</span> 
    height<span class="pl-k">:</span> <span class="pl-c1">480</span> 
    visible<span class="pl-k">:</span> <span class="pl-c1">true</span>

    QQuickMapboxGL {
        <span class="pl-smi">anchors</span>.<span class="pl-smi">fill</span><span class="pl-k">:</span> parent

        parameters<span class="pl-k">:</span> [
            MapParameter {
                property <span class="pl-k">var</span> type<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>style<span class="pl-pds">"</span></span>
                property <span class="pl-k">var</span> url<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>mapbox://styles/mapbox/streets-v9<span class="pl-pds">"</span></span>
            },
        ]

        center<span class="pl-k">:</span> <span class="pl-smi">QtPositioning</span>.<span class="pl-en">coordinate</span>(<span class="pl-c1">60.170448</span>, <span class="pl-c1">24.942046</span>) <span class="pl-c">// Helsinki</span>
        zoomLevel<span class="pl-k">:</span> <span class="pl-c1">14</span>
    }   
}</pre>
</div>
<p>Mapbox Qt SDK is currently in beta stage. We&#8217;re continuously adding new features and improving documentation is one of our immediate goals. Your patches and ideas are always welcome!</p>
<p>We also invite you to join us next month at <a href="https://www.qtworldsummit.com/">Qt World Summit 2016</a> and contribute to Mapbox on <a href="https://github.com/mapbox/mapbox-gl-native/">GitHub</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/10/04/customizable-vector-maps-with-the-mapbox-qt-sdk/">Customizable vector maps with the Mapbox Qt SDK</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/10/04/customizable-vector-maps-with-the-mapbox-qt-sdk/feed/</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>Qt Champion nominations for 2016 now open</title>
		<link>http://blog.qt.io/blog/2016/09/29/qt-champion-nominations-for-2016-now-open/</link>
		<pubDate>Thu, 29 Sep 2016 11:49:32 +0000</pubDate>
		<dc:creator><![CDATA[Tero Kojo]]></dc:creator>
				<category><![CDATA[Community]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt Champions]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45849</guid>
		<description><![CDATA[<p>It is the time of the year, when we can all take a moment to think who has been the most helpful, incredible, kind, skilled and friendly person in the Qt community. Qt Champions is a way to recognize the individuals who strive to help the community most. They can be found in different places and</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/29/qt-champion-nominations-for-2016-now-open/">Qt Champion nominations for 2016 now open</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-45850" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/Qt_Champion_200.png" alt="Qt_Champion_200" width="320" height="68" /><br />
It is the time of the year, when we can all take a moment to think who has been the most helpful, incredible, kind, skilled and friendly person in the Qt community.</p>
<p><a href="https://www.qt.io/champion/">Qt Champions</a> is a way to recognize the individuals who strive to help the community most. They can be found in different places and doing different things, but they are all united in their drive to make Qt a friendly and helpful community.</p>
<p>Past Qt Champions include among others, Samuel Gaist, who has always been helpful and friendly on the forum, and has more posts than anyone else. Iori Ayane, who has written and translated several books into Japanese, and is a key person in the Japanese Qt scene. Robin Burchell, who is a long time Qt contributor doing excellent work in the code base. And Johan Thelin and Jürgen Bocklage-Ryannel, the authors of the QML book.</p>
<p>In addition to the recognition that the Qt Champion title brings, the champions get a full Qt license for a year,  invitations to next years main Qt event and naturally an awesome Qt Champion t-shirt!</p>
<p>So if you have ideas on who should be this years Qt Champion, head over to the Wiki to make your <a href="https://wiki.qt.io/QtChampions">Qt Champion nominations</a>!</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/29/qt-champion-nominations-for-2016-now-open/">Qt Champion nominations for 2016 now open</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Qt Conference Apps – out of the Developer Trenches &#8211; Part 1</title>
		<link>http://blog.qt.io/blog/2016/09/22/qt-conference-apps-out-of-the-developer-trenches-part-1/</link>
		<comments>http://blog.qt.io/blog/2016/09/22/qt-conference-apps-out-of-the-developer-trenches-part-1/#comments</comments>
		<pubDate>Thu, 22 Sep 2016 11:45:58 +0000</pubDate>
		<dc:creator><![CDATA[Ekkehard Gentz [Independent Software Architect, Consultant]]]></dc:creator>
				<category><![CDATA[Community]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt World Summit]]></category>
		<category><![CDATA[app]]></category>
		<category><![CDATA[QtWS]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45843</guid>
		<description><![CDATA[<p>In a few weeks the Qt World Summit 2016 will open its doors in San Francisco and I have been given the chance to speak there about my experiences while developing the Qt World Summit 2016 Conference App. This article series here will give you some additional information to my presentation. For nearly 40 years</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/22/qt-conference-apps-out-of-the-developer-trenches-part-1/">Qt Conference Apps – out of the Developer Trenches &#8211; Part 1</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>In a few weeks the Qt World Summit 2016 will open its doors in San Francisco and I have been given the chance to speak there about my experiences while developing the Qt World Summit 2016 Conference App. This article series here will give you some additional information to my presentation.</p>
<p>For nearly 40 years I have been developing software, where the last 8 years I have focused on mobile App Development. I started mobile App Development with BlackBerry OS7 (Java) followed by BlackBerry 10 native Apps (Qt 4.8, Cascades UI Controls).</p>
<p>In 2016 BlackBerry, for first time ever, started to build secure Android Phones and my customers asked for x-platform Apps. Personally, I liked the way BlackBerry 10 Apps were built using QML and Cascades. Fortunately Qt just started Qt 5.6 Tech Preview of new Qt Quick Controls 2. I did some first tests to see if Qt Quick Controls 2 will enable me to develop good looking and performant mobile Apps.</p>
<p>First steps went well so I decided to spend some more time and to give Qt 5.7 and Qt Quick Controls 2 a try in real-life projects. Over the last 4 years I built many mobile business Apps for Enterprise and SMB and I also did some Apps for Developer Conferences.</p>
<p>I asked Tero Kojo to develop the QtCon 2016 Conference App as a proof-of-concept to rely on new Qt Quick Controls 2. You can download the QtCon Conference App from Google Play (<a href="https://play.google.com/store/apps/details?id=org.ekkescorner.c2g.qtcon">https://play.google.com/store/apps/details?id=org.ekkescorner.c2g.qtcon</a>), Apple App Store (<a href="https://itunes.apple.com/us/app/qtcon-2016-conference-app/id1144162386">https://itunes.apple.com/us/app/qtcon-2016-conference-app/id1144162386</a>), Amazon App Store (<a href="https://www.amazon.com/ekkescorner-QtCon-2016-Konferenz-App/dp/B01L7DVJTO">https://www.amazon.com/ekkescorner-QtCon-2016-Konferenz-App/dp/B01L7DVJTO</a>), as APK (<a href="https://app.box.com/s/fgeo14re3hrp47shg915geo1q4gzyxrz">https://app.box.com/s/fgeo14re3hrp47shg915geo1q4gzyxrz</a>) or build it by yourself from Open Source Github Repo (<a href="https://github.com/ekke/c2gQtCon_x">https://github.com/ekke/c2gQtCon_x</a>).</p>
<p>The App was built without any extra native Code – pure Qt only. Feedback was great and I just started to do the Qt World Summit 2016 Conference App – Github Repo will be public soon. Hopefully this time the App will also be available for Windows 10 from Windows App Store. Special thanks to Maurice Kalinowski for his help, the QtCon Conference App is running on Windows 10, although I had some problems uploading this to Windows App Store.</p>
<p>There is a blog series about all my experiences using Qt Quick Controls 2 to develop mobile Apps (<a href="http://j.mp/qt-x">http://j.mp/qt-x</a>), also a series in (German) Web &amp; Mobile Developer Magazin and now some articles here at Qt Blog, too. You can expect some 3 &#8211; 4 articles here at Qt Blog about developing Qt Conference Apps.</p>
<p>All development is done in my spare time and my goal is to motivate mobile App Developers to try out Qt Quick Controls 2 to develop x-platform Apps. I never did Qt development before, also never did native Apps for Android, iOS or Windows but now I am able to develop and upload Apps to Google Play or Apple App Store 🙂 I am also using Google Material Style to provide a modern mobile App feeling. Thanks to J-P Nurmi, Mitch Curtis and others for great hints HowTo customize Qt Quick Controls 2.</p>
<p>From my experiences over the last 6 months, developing mobile Apps with Qt 5.7 and Qt Quick Controls 2 is much more comfortable and easier than using Xamarin, React Native, Cordova, Angular or Ionic. The good news for all my friends from BlackBerry 10 community: there is a great amount of re-use of C++ Code from Cascades and also architecture style is similar using Signals/Slots and QObject* as data model.</p>
<h2>Speed is key to success</h2>
<p>The first impression of any mobile App with regards to User Experience comes from starting the App. The User should never have the feeling that an App is slow. Some of my recipes for a speedy start are below:</p>
<ul>
<li>fast creation of C++ Classes</li>
<li>immediately show something on the screen</li>
<li>be dynamic: only instantiate UI Controls you really need</li>
</ul>
<p>How am I doing this? Only instantiate C++ Classes, avoid any initialization as open Databases, load Cache Files and more.</p>
<pre>DataServer::DataServer(QObject *parent) : QObject(parent)</pre>
<pre>{</pre>
<pre>    // Do NOTHING HERE</pre>
<pre>}</pre>
<p>Use the fastest possible way to show some UI to the User. My root and main Navigation Control is a Drawer. The Drawer contains a list of “Destinations“, where a Destination is a specific area of the Application as</p>
<ul>
<li>Home</li>
<li>Schedule</li>
<li>Speakers</li>
<li>Venue</li>
<li>…</li>
</ul>
<p><img class="alignright size-full wp-image-45844" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/01_drawer.png" alt="01_drawer" width="1440" height="2560" /></p>
<p>Each Destination can be one of the Qt Quick Controls 2 Navigation Controls (<a href="http://doc.qt.io/qt-5/qtquickcontrols2-navigation.html">http://doc.qt.io/qt-5/qtquickcontrols2-navigation.html</a>) or Container Controls(<a href="http://doc.qt.io/qt-5/qtquickcontrols2-containers.html">http://doc.qt.io/qt-5/qtquickcontrols2-containers.html</a>):</p>
<ul>
<li>Pane</li>
<li>Page</li>
<li>StackView</li>
<li>SwipeView / Tab Bar</li>
</ul>
<p>Inside the Drawer you can use a ListView to let the User select a Destination – take a look at Qt Quick Controls 2 Gallery Example. I‘m using a Repeater to create different types of Controls: Destinations, Divider, Header, …</p>
<p>To show the selected Destination best way is to use a StackView as your root UI Control and swap the content – so there‘s always only one Item at this root StackView.</p>
<p><img class="alignright size-full wp-image-45845" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/02_destinations.png" alt="02_destinations" width="1297" height="1556" /></p>
<p>To startup immediately don‘t create all the Drawer – Destinations ! This can easy be done with a little trick: define the Repeater without a data model.</p>
<pre>        Repeater {</pre>
<pre>            id: destinations</pre>
<pre>            // Don‘t set the model here !</pre>
<pre>            // model: navigationModel</pre>
<pre>            Destination {</pre>
<pre>                id: destinationLoader</pre>
<pre>            }</pre>
<pre>        }

</pre>
<p>So nothing will be created now. To show something to the User create a lightweight Control as initialItem. I‘m using a BusyIndicator.</p>
<pre>        // STACK VIEW INITIAL ITEM (BUSY INDICATOR)</pre>
<pre>        // immediately activated and pushed on stack as initialItem</pre>
<pre>        Loader {</pre>
<pre>            id: <em>initialPlaceholder</em></pre>
<pre>            source: "pages/InitialItemPage.qml"</pre>
<pre>            active: true</pre>
<pre>            visible: false</pre>
<pre>            onLoaded: {</pre>
<pre>                // Show BUSY INDICATOR</pre>
<pre>                <em>rootPane</em>.initialItem = <em>item</em></pre>
<pre>                <em>item</em>.init()</pre>
<pre>                // Now something is VISIBLE - do the other time-consuming stuff</pre>
<pre>                <em>startupDelayedTimer</em>.start()</pre>
<pre>            }</pre>
<pre>        }

</pre>
<p>The next trick is to start a Timer with a small delay to allow QML to show and animate the BusyIndicator. Then from Timer timeout execute all the initialization stuff and call some Q_INVOKABLE methods from your C++ Classes to load data from Cache and more.</p>
<p>As soon as this is done you can go on with creation of UI Controls. To trigger this set the Repeater Data Model and all the Destinations will be created and HomePage will become current Item on root StackView.</p>
<pre>        Timer {</pre>
<pre>            id: <em>startupDelayedTimer</em></pre>
<pre>            interval: 300</pre>
<pre>            repeat: false</pre>
<pre>            onTriggered: {</pre>
<pre>                <em>initialPlaceholder</em>.item.showInfo("Initialize Data ...")</pre>
<pre>                <em>dataManager</em>.init()</pre>
<pre>                <em>settings</em> = <em>dataManager</em>.settingsData()</pre>
<pre>                <em>dataUtil</em>.setSessionFavorites()</pre>
<pre>                // … and so on ...</pre>
<pre>                // inject model into Destinations Repeater</pre>
<pre>                <em>destinations</em>.model = <em>navigationModel</em></pre>
<pre>                // show the Navigation Bars (Drawer and Favorites)</pre>
<pre>                <em>initDone</em> = true</pre>
<pre>                // now NavigationBars available</pre>
<pre>                // show first destination</pre>
<pre>                <em>rootPane</em>.activateDestination(<em>firstActiveDestination</em>)</pre>
<pre>            }</pre>
<pre>        }</pre>
<p>&nbsp;</p>
<p>Here we go: first „real“ Page is visible.</p>
<p>But wait: not all Destinations will really be created from the Repeater – this would take too much time and consume too much memory. All the Destinations are created dynamically using Loaders and I implemented some Activation Policies:</p>
<ul>
<li><strong>Immediate</strong>: The Control will be instantiated and remain. I‘m using this only for the first visible Page – the HomePage.</li>
<li><strong>When-Selected</strong>: First time a User selects a Destination will create the Control and remain. This happens for all Destinations a User normaly will use while the App is running: Schedule, Speakers,&#8230;</li>
<li><strong>While-Selected</strong>: Those Destinations are only created when needed and be destroyed if User changes the Destination. Candidates for this Policy: Help, Settings, About, &#8230;</li>
</ul>
<p>Take a look at the code how all of this is implemented, attend my Session at Qt World Summit 2016 in San Francisco (<a href="http://www.qtworldsummit.com/speakers/ekkehard-gentz/">http://www.qtworldsummit.com/speakers/ekkehard-gentz/</a>) or meet me at #QtWS16.</p>
<p>Stay tuned – next article will cover the QObject* Data Model I‘m using, Caching and Data Binding.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/22/qt-conference-apps-out-of-the-developer-trenches-part-1/">Qt Conference Apps – out of the Developer Trenches &#8211; Part 1</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/22/qt-conference-apps-out-of-the-developer-trenches-part-1/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Qt Graphics with Multiple Displays on Embedded Linux</title>
		<link>http://blog.qt.io/blog/2016/09/19/qt-graphics-with-multiple-displays-on-embedded-linux/</link>
		<comments>http://blog.qt.io/blog/2016/09/19/qt-graphics-with-multiple-displays-on-embedded-linux/#comments</comments>
		<pubDate>Mon, 19 Sep 2016 07:46:26 +0000</pubDate>
		<dc:creator><![CDATA[Laszlo Agocs]]></dc:creator>
				<category><![CDATA[Automotive]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Graphics]]></category>
		<category><![CDATA[OpenGL]]></category>
		<category><![CDATA[QPA]]></category>
		<category><![CDATA[Qt Quick]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45599</guid>
		<description><![CDATA[<p>Creating devices with multiple screens is not new to Qt. Those using Qt for Embedded in the Qt 4 times may remember configuration steps like this. The story got significantly more complicated with Qt 5&#8217;s focus on hardware accelerated rendering, so now it is time to take a look at where we are today with</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/19/qt-graphics-with-multiple-displays-on-embedded-linux/">Qt Graphics with Multiple Displays on Embedded Linux</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Creating devices with multiple screens is not new to Qt. Those using Qt for Embedded in the Qt 4 times may remember configuration steps like <a href="https://doc.qt.io/archives/qtextended4.4/tut-dualdisplay.html">this</a>. The story got significantly more complicated with Qt 5&#8217;s focus on hardware accelerated rendering, so now it is time to take a look at where we are today with the upcoming Qt 5.8.</p>
<h2>Windowing System Options on Embedded</h2>
<p>The most common ways to run Qt applications on an embedded board with accelerated graphics (typically EGL + OpenGL ES) are the following:</p>
<ul>
<li><a href="http://doc-snapshots.qt.io/qt5-5.8/embedded-linux.html">eglfs</a> on top of fbdev or a proprietary compositor API or Kernel Modesetting + the Direct Rendering Manager</li>
<li>Wayland: Weston or a compositor implemented with the <a href="http://doc-snapshots.qt.io/qt5-5.8/qtwaylandcompositor-index.html">Qt Wayland Compositor</a> framework + one or more Qt client applications</li>
<li>X11: Qt applications here run with the same xcb platform plugin that is used in a typical desktop Linux setup</li>
</ul>
<p>We are now going to take a look at the status of <em>eglfs</em> because this is the most common option, and because some of the other approaches rely on it as well.</p>
<h2>Eglfs Backends and Support Levels</h2>
<p><em>eglfs</em> has a number of backends for various devices and stacks. For each of these the level of support for multiple screens falls into one of the three following categories:</p>
<ul>
<li>[1] Output management is available.</li>
<li>[2] Qt applications can choose at launch time which single screen to output to, but apart from this static setting no other configuration option is provided.</li>
<li>[3] No output-related configuration is provided.</li>
</ul>
<p>Note that some of these, in particular [2], may require additional kernel configuration via a <em>video</em> argument or similar. This is out of Qt&#8217;s domain.</p>
<p>Now let&#8217;s look at the available backends and the level of multi-display support for each:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager">KMS/DRM</a> with <a href="https://en.wikipedia.org/wiki/Mesa_%28computer_graphics%29#Generic_Buffer_Management">GBM</a> buffers (Mesa (e.g. Intel) or modern PowerVR and some other systems) [1]</li>
<li>KMS/DRM with <a href="https://wiki.qt.io/Qt_for_Embedded_Linux/XDC2014RitgerEGLNonMesa">EGLDevice/EGLOutput/EGLStream</a> (NVIDIA) [1]</li>
<li>Vivante fbdev (NXP i.MX6) [2]</li>
<li>Broadcom Dispmanx (Raspberry Pi) [2]</li>
<li>Mali fbdev (ODROID and others) [3]</li>
<li>(X11 fullscreen window &#8211; targeted mainly for testing and development) [3]</li>
</ul>
<p>Unsurprisingly, it is the backends using the DRM framework that come out best. This is as expected, since there we have a proper connector, encoder and CRTC enumeration API, whereas others have to resort to vendor-specific solutions that are often a lot more limited.</p>
<p>We will now focus on the two DRM-based backends.</p>
<h2>Short History of KMS/DRM in Qt</h2>
<h3>Qt 5.0 &#8211; 5.4</h3>
<p>Qt 5 featured a <em>kms</em> platform plugin right from the beginning. This was fairly usable, but limited in features and was seen more as a proof of concept. Therefore, with the improvements in <em>eglfs</em>, it became clear that a more unified approach was necessary. Hence the introduction of the <em>eglfs_kms</em> backend for <em>eglfs</em> in Qt 5.5.</p>
<h3>Qt 5.5</h3>
<p>While originally developed for a PowerVR-based embedded system, the new backend proved immensely useful for all Linux systems running with <a href="http://mesa3d.org/">Mesa</a>, the open-source stack, in particular on Intel hardware. It also featured a plane-based mouse cursor, with basic support for multiple screens added soon afterwards.</p>
<h3>Qt 5.6</h3>
<p>With the rise of NVIDIA&#8217;s somewhat different approach to buffer management &#8211; see <a href="https://wiki.qt.io/Qt_for_Embedded_Linux/XDC2014RitgerEGLNonMesa">this presentation</a> for an introduction &#8211; an additional backend had to be introduced. This is called <em>eglfs_kms_egldevice</em> and allows running on the automotive-oriented <a href="http://www.nvidia.com/object/jetson-automotive-development-platform.html">Jetson Pro</a>, <a href="http://www.nvidia.com/object/drive-cx.html">DRIVE CX</a> and <a href="http://www.nvidia.com/object/drive-px.html">DRIVE PX</a> systems.</p>
<p>The initial version of the plugin was standalone and independent from the existing DRM code. This led to certain deficiencies, most notably the lack of multi-display support.</p>
<h3>Qt 5.7</h3>
<p>Fortunately, these problems got addressed pretty soon. Qt 5.7 features proper code sharing between the backends, making most of the multi-display support and its JSON-based configuration system available to the EGLStream-based backend as well.</p>
<p>Meanwhile the GBM-based backend got a number of fixes, in particular related to the hardware mouse cursor and the virtual desktop.</p>
<h3>Qt 5.8</h3>
<p>The upcoming release features two important improvements: it closes the gaps between the GBM and EGLStream backends and introduces support for advanced configurability. The former covers mainly the handling of the virtual desktop and the default, non-plane-based OpenGL mouse cursor which was unable to &#8220;move&#8221; between screens in previous releases.</p>
<p>The documentation is already browsable <a href="https://doc-snapshots.qt.io/qt5-5.8/embedded-linux.html#display-output">at the doc snapshots page</a>.</p>
<p>Besides the ability to specify the virtual desktop layout, the introduction of the <em>touchDevice</em> property is particularly important when building systems where one or more of the screens is made interactive via a touchscreen. Let&#8217;s take a quick look at this.</p>
<h2>Touch Input</h2>
<p>Let&#8217;s say you are creating <a href="https://blog.qt.io/blog/2016/03/03/creating-digital-instrument-clusters-with-qt/">digital instrument clusters with Qt</a>, with multiple touch-enabled displays involved. Given that the touchscreens report absolute coordinates in their events, how can Qt tell which screen&#8217;s virtual geometry the event should be translated to? Well, on its own it cannot.</p>
<p>From Qt 5.8 it will be possible to help out the framework. By setting <em>QT_LOGGING_RULES=qt.qpa.*=true</em> we enable logging which lets us figure out the touchscreen&#8217;s device node.  We can then create a little JSON configuration file on the device:</p>
<pre>{
    "device": "drm-nvdc",
    "outputs": [
      {
        "name": "HDMI1",
        "touchDevice": "/dev/input/event5",
      }
    ]
}
</pre>
<p>This will come handy in any case since configuration of screen resolution, virtual desktop layout, etc. all happens in the same file.</p>
<p>Now, when a Qt application is launched with the <em>QT_QPA_EGLFS_KMS_CONFIG</em> environment variable pointing to our file, Qt will know that the display connected to the first HDMI port has a touchscreen as well that shows up at /dev/input/event5. Hence any touch event from that device will get correctly associated with the screen in question.</p>
<h2>Qt on the DRIVE CX</h2>
<p>Let&#8217;s see something in action. In the following example we will use an NVIDIA DRIVE CX board, with two monitors connected via HDMI and DisplayPort. The software stack is the default Vibrante Linux image, with Qt 5.8 deployed on top. Qt applications run with the <em>eglfs</em> platform plugin and its <em>eglfs_kms_egldevice</em> backend.</p>
<p><img class="alignnone size-full wp-image-45612" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/drivecx_small1.png" alt="drivecx_small" width="1024" height="1040" /></p>
<p>Our little test environment looks like this:</p>
<p><img class="alignnone size-large wp-image-45604" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/disp_both.jpeg" alt="disp_both" width="1024" height="768" /></p>
<p>This already looks impressive, and not just because we found such good use for the Windows 95, MFC, ActiveX and COM books hanging around in the office from previous decades. The two monitors on the sides are showing a Qt Quick application that apparently picks up both screens automatically and can drive both at the same time. Excellent.</p>
<p>The application we are using <a href="https://github.com/alpqr/quickmwtest">is available here</a>. It follows the standard multi-display application model for embedded (eglfs): creating a dedicated QQuickWindow (or QQuickView) on each of the available screens. For an example of this, check the code in the github repository, or take a look at the <a href="https://doc-snapshots.qt.io/qt5-5.8/embedded-linux.html#eglfs-with-eglfs-kms-backend">documentation pages</a> that also have example code snippets.</p>
<p>A closer look reveals our desktop configuration:</p>
<p><img class="alignnone size-large wp-image-45603" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/disp2.jpeg" alt="disp2" width="1024" height="768" /></p>
<p>The gray MouseArea is used to test mouse and touch input handling. Hooking up a USB touch-enabled display immediately reveals the problems of pre-5.8 Qt versions: touching that area would only deliver events to it when the screen happened to be the first one. In Qt 5.8 this is can now be handled as described above.</p>
<p><img class="alignnone size-full wp-image-45602" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/disp1.jpeg" alt="disp1" width="1600" height="1200" /></p>
<p>It is important to understand the screen geometry concepts in <a href="http://doc.qt.io/qt-5/qscreen.html">QScreen</a>. When the screens form a virtual desktop (which is the default for <em>eglfs</em>), the interpretation is the following:</p>
<ul>
<li>geometry() &#8211; the screen&#8217;s position and size in the virtual desktop</li>
<li>availableGeometry() &#8211; without a windowing system this is the same as geometry()</li>
<li>virtualGeometry() &#8211; the geometry of the entire virtual desktop to which the screen belongs</li>
<li>availableVirtualGeometry() &#8211; same as virtualGeometry()</li>
<li>virtualSiblings() &#8211; the list of all screens belonging to the same virtual desktop</li>
</ul>
<h2>Configuration</h2>
<p>How does the virtual desktop get formed? It may seem fairly random by default. In fact it simply follows the order DRM connectors are reported in. This is often not ideal. Fortunately, it is configurable starting with Qt 5.8. For instance, to ensure that the monitor on the first HDMI port gets a top-left position of <em>(0, 0)</em>, we could add something like the following to the configuration file specified in <em>QT_QPA_EGLFS_KMS_CONFIG</em>:</p>
<pre>{
  "device": "drm-nvdc",
  "outputs": [
    {
      "name": "HDMI1",
      "virtualIndex": 0
    },
    {
      "name": "DP1",
      "virtualIndex": 1
    }
  ]
}
</pre>
<p>If we wanted to create a vertical layout instead of horizontal (think an instrument cluster demo with three or more screens stacked under each other), we could have added:</p>
<pre>{
  "device": "drm-nvdc",
  "virtualDesktopLayout": "vertical",
  ...
}
</pre>
<p>More complex layouts, for example a T-shaped setup with 4 screens, are also possible via the <em>virtualPos</em> property:</p>
<pre>
{
  ...
  "outputs": [
    { "name": "HDMI1", "virtualIndex": 0 },
    { "name": "HDMI2", "virtualIndex": 1 },
    { "name": "DP1", "virtualIndex": 2 },
    { "name": "DP2", "virtualPos": "1920, 1080" }
  ]
}
</pre>
<p>Here the fourth screen&#8217;s virtual position is specified explicitly.</p>
<p>In addition to <em>virtualIndex</em> and <em>virtualPos</em>, the other commonly used properties are <em>mode</em>, <em>physicalWidth</em> and <em>physicalHeight</em>. <em>mode</em> sets the desired mode for the screen and is typically a resolution, e.g. &#8220;1920&#215;1080&#8221;, but can also be set to &#8220;off&#8221;, &#8220;current&#8221;, or &#8220;preferred&#8221; (which is the default).</p>
<p>For example:</p>
<pre>{
  "device": "drm-nvdc",
  "outputs": [
    {
      "name": "HDMI1",
      "mode": "1024x768"
    },
    {
      "name": "DP1",
      "mode": "off"
    }
  ]
}
</pre>
<p>The physical sizes of the displays become quite important when working with text and components from Qt Quick Controls. This is because these base size calculations on the logical DPI that is in turn based on the physical width and height. In desktop environments queries for these sizes usually work just fine, so no further actions are needed. On embedded however, it has often been necessary to provide the sizes in millimeters via the environment variables <em>QT_QPA_EGLFS_PHYSICAL_WIDTH</em> and <em>QT_QPA_EGLFS_PHYSICAL_HEIGHT</em>. This is not suitable in a multi-display environment, and therefore Qt 5.8 introduces an alternative: the <em>physicalWidth</em> and <em>physicalHeight</em> properties (values are in millimeters) in the JSON configuration file. As witnessed in the second screenshot above, the physical sizes did not get reported correctly in our demo setup. This can be corrected, as it was done for the monitor in the first screenshot, by doing something like:</p>
<pre>{
  "device": "drm-nvdc",
  "outputs": [
    {
      "name": "HDMI1",
      "physicalWidth": 531,
      "physicalHeight": 298
    },
    ...
  ]
}
</pre>
<p>As always, enabling logging can be a tremendous help for troubleshooting. There are a number of logging categories for eglfs, its backends and input, so the easiest is often to enable everything under <em>qt.qpa</em> by doing <em>export QT_LOGGING_RULES=qt.qpa.*=true</em> before starting a Qt application.</p>
<h2>What About Wayland?</h2>
<p>What about systems using multiple GUI processes and compositing them via a <a href="http://doc-snapshots.qt.io/qt5-5.8/qtwayland-compositor-qmlmodule.html">Qt-based Wayland compositor</a>? Given that the compositor application still needs a platform plugin to run with, and that is typically <em>eglfs</em>, everything described above applies to most Wayland-based systems as well.</p>
<p>Once the displays are configured correctly, the compositor can create multiple QQuickWindow instances (QML scenes) targeting each of the connected screens. These can then be assigned to the corresponding <a href="http://doc-snapshots.qt.io/qt5-5.8/qml-qtwayland-compositor-waylandoutput.html">WaylandOutput</a> items. Check the <a href="http://doc-snapshots.qt.io/qt5-5.8/qtwaylandcompositor-multi-output-example.html">multi output example</a> for a simple compositor with multiple outputs.</p>
<p>The rest, meaning how the client applications&#8217; windows are placed, perhaps using the scenes on the different displays as one big virtual scene, moving client &#8220;windows&#8221; between screens, etc., are all in QtWayland&#8217;s domain.</p>
<h2>What&#8217;s Missing and Future Plans</h2>
<p>The QML side of screen management could benefit from some minor improvements: unlike C++, where <a href="https://doc-snapshots.qt.io/qt5-5.8/qscreen.html">QScreen</a>, <a href="http://doc-snapshots.qt.io/qt5-5.8/qwindow.html">QWindow</a> and <a href="http://doc-snapshots.qt.io/qt5-5.8/qwindow.html#setScreen">QWindow::setScreen()</a> are first class citizens, Qt Quick has currently no simple way to associate a <a href="http://doc-snapshots.qt.io/qt5-5.8/qml-qtquick-window-window.html">Window</a> with a QScreen, mainly because QScreen instances are only partially exposed to the QML world. While this is not fatal and can be worked around with some C++ code, as usual, the story here will have to be enhanced a bit.</p>
<p>Another missing feature is the ability to connect and disconnect screens at runtime. Currently such hotplugging is not supported by any of the backends. It is worth noting that with embedded systems the urgency is probably a lot lower than with ordinary desktop PCs or laptops, since the need to change screens in such a manner is less common. Nevertheless this is something that is on the roadmap for future releases.</p>
<p>That&#8217;s it for now. As we know, more screens are better than one, so why not just let Qt power them all?</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/19/qt-graphics-with-multiple-displays-on-embedded-linux/">Qt Graphics with Multiple Displays on Embedded Linux</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/19/qt-graphics-with-multiple-displays-on-embedded-linux/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Your data, your code, your cloud&#8230;your choice!</title>
		<link>http://blog.qt.io/blog/2016/09/16/iot-your-data-your-code-your-cloud-your-choice/</link>
		<comments>http://blog.qt.io/blog/2016/09/16/iot-your-data-your-code-your-cloud-your-choice/#comments</comments>
		<pubDate>Fri, 16 Sep 2016 08:20:45 +0000</pubDate>
		<dc:creator><![CDATA[Carl Engh]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Cloud]]></category>
		<category><![CDATA[Internet of Things]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45608</guid>
		<description><![CDATA[<p>The Internet of Things, can mean, well…so many things. So can platform independence. For many people, a cloud platform, often provided as a service, is an essential part of an IoT offering. For others, flexibility is more important – the flexibility to run your solution on any cloud – or the flexibility to run it internally</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/16/iot-your-data-your-code-your-cloud-your-choice/">Your data, your code, your cloud&#8230;your choice!</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>The Internet of Things, can mean, well…so many things. So can platform independence. For many people, a cloud platform, often provided as a service, is an essential part of an IoT offering. For others, flexibility is more important – the flexibility to run your solution on any cloud – or the flexibility to run it internally on your own network on your own servers, because you’re paranoid and believe your competitors are watching you (and you know they are), or even worse, maybe someone is going to try to hack your solution, bring it down and put a serious dent in your up-time track record. Regardless, when developing an IoT solution &#8211; the choice should be yours and you should be in charge of your own data.</p>
<p><a href="https://www.qt.io/whitepapers" target="_blank"><img class="wp-image-45667" style="float: right;padding-left: 16px" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/Qt_Top-5-considerations-infographics_15082016-section-4_CR.png" alt="Qt Top 5 Considerations IoT infographic" width="300" height="663" /></a>I was previously involved in the development an IoT strategy for a company operating within the industrial automation space, where we initiated the same IoT project with a third party platform as a service provider (PaaS) – to be part of our offering to our end customers &#8211; twice. Yes, twice! Twice, because we were working with the wrong providers and because we came to the same conclusion both times. Twice, because the providers were offering <em>their</em> solution on <em>their</em> cloud and <em>they</em> wanted to <em>rent</em> it to us so we could <em>re-rent</em> it to <em>our</em> end customers.  It didn’t sound right and they would never allow us to move the solution to other cloud platforms or host the solution in any other format. And we could forget about making drastic changes to the back-end system and if we were to make any minor change we had to use their consultants ($$$). In other words, it would have never been <em>our</em> solution – it would have been <em>theirs</em> and <em>they</em> would own the data and eventually most likely reap all the revenue potential once we were locked in. <em>We</em> wanted it to be <em>our</em> solution and our end customers wanted it to be <em>theirs</em>. Flexibility, ownership, cross-platform and cash money being the key words here.</p>
<p>We even tried to pitch the solution to our end customers, but they weren’t buying our story. When we reported the customer feedback to the IoT/PaaS vendor, they replied that our end customers “were being conservative” (no, they weren’t – they were just being smart). They wanted flexibility and control over their own solution and their own data. They valued security. They didn’t want to have some sort of closed software agent sending data from their devices where they couldn’t see what was being sent and to where it was being sent. One of our key customers, who we pitched the solution to, even went to the measure of making us sign a paper stating that no such “IoT software” existed on their equipment and that we would never, ever, EVER connect them to any cloud, which wasn’t their own choice and on which they could not see what data was being sent and where it was being sent to. Period! So we stopped the project. Twice. With the software we created with Qt we didn’t have this problem and you won’t either. With Qt it will be <em>your</em> solution, on <em>your</em> platform of choice and we are not forcing you onto any cloud. It is not that we don’t like the cloud. We do. We just think the choice of how you want to host your IoT solution should be yours and we have developed tools to make that simpler for you. Qt is also open, so you know what is going on and can make sure <em>your</em> data remains <em>yours</em> and you know where it is sent. There is also a bunch of other benefits you can achieve by using Qt in your IoT development. If you want to learn more about the software requirements and other important stuff you should be considering before choosing an IoT platform, <a href="https://www.qt.io/whitepapers" target="_blank">read our whitepaper: &#8220;Building the Internet of Things and How Qt Can Help&#8221;. </a></p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/16/iot-your-data-your-code-your-cloud-your-choice/">Your data, your code, your cloud&#8230;your choice!</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/16/iot-your-data-your-code-your-cloud-your-choice/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Internet of Things: Why Tools Matter?</title>
		<link>http://blog.qt.io/blog/2016/09/15/internet-of-things-why-tools-matter/</link>
		<comments>http://blog.qt.io/blog/2016/09/15/internet-of-things-why-tools-matter/#comments</comments>
		<pubDate>Thu, 15 Sep 2016 11:49:39 +0000</pubDate>
		<dc:creator><![CDATA[Tuukka Turunen]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Internet of Things]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45806</guid>
		<description><![CDATA[<p>With the Internet of Things (IoT) transformation, it’s obvious that the amount of connected devices in the world is increasing rapidly. Everywhere around our daily lives we all use more and more of them. In addition to being connected, more devices get equipped with a touch screen and a graphical user interface. We have all</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/15/internet-of-things-why-tools-matter/">Internet of Things: Why Tools Matter?</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>With the Internet of Things (IoT) transformation, it’s obvious that the amount of connected devices in the world is increasing rapidly. Everywhere around our daily lives we all use more and more of them. In addition to being connected, more devices get equipped with a touch screen and a graphical user interface. We have all seen this around us and many Qt users are also deeply involved in creating software for these devices. To bring in some numbers, the Gartner group <a href="http://www.gartner.com/newsroom/id/3165317" target="_blank">has estimated</a> that the amount of connected devices will grow to a whopping 20.7 billion by 2020 (and <a href="http://www.mckinsey.com/industries/high-tech/our-insights/the-internet-of-things-sizing-up-the-opportunity" target="_blank">some predict</a> even higher growth, up to 30 billion devices).</p>
<p>Not only is the number of devices growing, but the complexity and amount of software is also increasing rapidly. For example, today’s passenger car can have over 100M lines of code, and this <a href="https://www.linkedin.com/pulse/20140626152045-3625632-car-software-100m-lines-of-code-and-counting" target="_blank">is expected</a> to triple in the future as the functionality of automotive software increases. Cars are on the high side of complexity, but even the simplest connected devices need a lot of software to be able to handle the requirements for connectivity, security and to match the growing usability expectations of consumers.</p>
<p>Here is how the estimated growth of connected devices looks in a line graph:</p>
<p><img class="alignnone wp-image-45809" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/iotdevices.png" alt="iotdevices" width="600" height="361" /></p>
<p>What is inside these devices? What kind of software drives the connected devices? What kind of skills are needed to build these? It <a href="http://systemdesign.altera.com/tomorrows-embedded-systems-programming-language-still-c/" target="_blank">is estimated</a> that 95% of today’s embedded systems are created with C/C++, and that this is not significantly changing in the foreseeable future. Then, on the other hand, according to <a href="https://blog.jetbrains.com/clion/2015/07/infographics-cpp-facts-before-clion/" target="_blank">a study</a> there were 4.4M C++ developers and 1,9M C developers in 2015 in the World. An older study by IDC from 2001, shows that the number of C++ developers <a href="http://www.stroustrup.com/bs_faq.html#number-of-C++-users" target="_blank">was estimated</a> to be 3M back then. This means the number of C++ developers has been growing steadily around 3% per year and is expected to continue with a similar trend &#8211; or at least within a similar range.</p>
<p>So, a visualization of C++ developer growth provides the following graph:</p>
<p><img class="alignnone wp-image-45810" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/cppdevelopers.png" alt="cppdevelopers" width="600" height="360" /><br />
The estimated number of devices, most of which will be done with C and C++, is already growing with much faster pace than the amount of C++ developers and the growth is expected to get even higher. Due to the increased complexity of functionality, the amount of software needed in the devices is also growing. Although some of the new devices will be very simple in functionality, on average the devices get more and more complex to meet consumers’ requirements.</p>
<p>Now, comparing these two trends together gives us an interesting paradox: <em><strong>How can the few millions of C++ developers match the requirement to build the dozens of billions of connected devices in the future?</strong></em></p>
<p>Putting these two graphs together, we can clearly visualize the paradox (and a possible solution):</p>
<p><img class="alignnone wp-image-45808" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/developes_vs_iotdevices.jpg" alt="developes_vs_iotdevices" width="600" height="600" /></p>
<p>&nbsp;</p>
<p>So how does this add up? Do we expect a 2020 C++ developer to write 20 times more code than a decade ago? That does not work. Even if all the C++ developers would focus into embedded, with no one creating and maintaining software for desktop and mobile applications, there still may not be enough developers. C++ developers can’t be easily trained from other professionals – programming is a skill that takes years to learn and not everyone can master.</p>
<p>So, Something needs to be done to facilitate two things: <em><strong>Enabling the C++ developers to be more productive and also helping the non-C++ developers to create the devices.</strong></em></p>
<p>Therefore, the approach for creating embedded software needs to be adapted to the new situation. The only way to cope with the growth is to have good tools for embedded device creation and to increase the reuse of software. It is no longer viable to re-invent the wheel for each product – the scarce programming resources have to be targeted into differentiating functionality. Organizations will have to prioritize and focus into where they add value the most – anything that can be reused should not be created inhouse. Using tools and frameworks like Qt is the only viable approach to create the envisioned devices. The old Qt tagline: “Code less. Create more. Deploy Everywhere” is more relevant today than it has ever been. Qt has a solid track record from embedded, desktop and mobile development, making the creation of applications easy in any platform and also across multiple platforms.</p>
<p>It is likely that even reuse of software assets is not enough. It is also necessary to increase productivity of the C++ developers and to extend the personnel creating the software beyond the ones who master C++. Using the widely renowned and well-documented Qt API functionality and excellent development tools, C++ developers are more productive than before. Qt also provides an easy-to-use declarative QML language and visual design tools for user interface creation, growing the amount of people who can create software for embedded beyond the C++ developers. There are already over million developers familiar with Qt, and new developers across the world are taking it into use every day.</p>
<p>With the QML language, visual UI design tools and functionality for embedded devices does not mandate C++ skills for every developer in the team. It will still be necessary to have core C/C++ developers when making embedded devices, but others can help as well. Using Qt allows both non-C++ developers to create some of the needed functionality and the C++ developers to be more productive.</p>
<p>To increase developer productivity and to extend the developer base, Qt offers otherwise unseen ease of embedded development. Qt provides many of the common development boards supported out of the box, one click deployment to target device, built-in device emulator, on target debugger, performance analyzer, visual UI designer and many more tools in the integrated development environment. With the integrated tools and extensive API functionality, developing with Qt is unlike traditional embedded development. Qt makes embedded development almost as easy as creation of desktop or mobile applications.</p>
<p><em><strong>The future is written with Qt.</strong></em></p>
<p>To learn more about the latest developments of Qt, join us at <a href="http://www.qtworldsummit.com/" target="_blank">the Qt World Summit</a> October 18-20th 2016 in San Francisco, USA.</p>
<p>We’re also hosting an online panel discussion with industry experts around IoT and software in general September 27th. <a href="http://info.qt.io/webinar-interface-of-things-use-cases-considerations" target="_blank">Register today</a> for the webinar for an interesting fireside chat!</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/15/internet-of-things-why-tools-matter/">Internet of Things: Why Tools Matter?</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/15/internet-of-things-why-tools-matter/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>QtCon wrap up</title>
		<link>http://blog.qt.io/blog/2016/09/08/qtcon-wrap-up/</link>
		<comments>http://blog.qt.io/blog/2016/09/08/qtcon-wrap-up/#comments</comments>
		<pubDate>Thu, 08 Sep 2016 13:11:04 +0000</pubDate>
		<dc:creator><![CDATA[Tero Kojo]]></dc:creator>
				<category><![CDATA[Community]]></category>
		<category><![CDATA[Contributors]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Events]]></category>
		<category><![CDATA[QtCon]]></category>
		<category><![CDATA[video]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45765</guid>
		<description><![CDATA[<p>First, a huge Thank You to everyone who was at QtCon! We had an incredible time in Berlin. First the training day by KDAB and then three conference days packed full with topics ranging from how to set up an open source organisation to fine tuning Qt graphics. Second. a shout out to the communities that</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/08/qtcon-wrap-up/">QtCon wrap up</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-45004" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/QtCon16_Logo.png" alt="QtCon16_Logo" width="800" height="500" /></p>
<p>First, a huge Thank You to everyone who was at QtCon!</p>
<p>We had an incredible time in Berlin. First the training day by KDAB and then three conference days packed full with topics ranging from how to set up an open source organisation to fine tuning Qt graphics.</p>
<p>Second. a shout out to the communities that we had the pleasure to work with to create QtCon, <a href="http://fsfe.org/" target="_blank">FSFE</a>, <a href="https://www.kde.org/" target="_blank">KDE </a>and <a href="http://www.videolan.org/" target="_blank">VideoLAN</a>, and of course to our partners <a href="https://www.kdab.com/" target="_blank">KDAB</a>, you guys rock!</p>
<p>Last but definitely not least, Thank You obviously to all the volunteers from the different communities!</p>
<h2>The magic of QtCon</h2>
<p>When we originally got together to plan QtCon, we envisioned it as a meeting of communities, one event where everyone can come. This is something we achieved. At the end of the event, every one of the community representatives made the same comment; meeting new and interesting people was the best part. Chatting about new things over coffee or lunch, walking from a deep dive technical session to the social impact of open source was something that only happens when we have different communities mix. By the end of the event, I believe everyone headed for home with a feeling that getting together is something we need to do more often.</p>
<p>The Keynotes were amazing! Please take the time to hear what <a href="http://files.kde.org/akademy/2016/518_keynote_1_how_social_activists_are_using_open_data.mp4" target="_blank">Raul</a>, <a href="http://files.kde.org/akademy/2016/519_keynote_2__cultivating_empathy.mp4" target="_blank">Leslie </a>and <a href="http://files.kde.org/akademy/2016/520_keynote_3_software_as_a_public_service.mp4" target="_blank">Julia </a>had to say in their talks. The take-home message for me was that software has changed the world and we need to understand the change on every level. For Qt this means that we need to be sensitive to these changes and understand the impact we have in society.</p>
<p>The Qt Specific topics covered everything happening in and around Qt &#8211; from the technical details to overall community issues.</p>
<p>The most awaited Qt session was naturally the talk on the status and future of Qt by Chief Maintainer Lars Knoll. The talk outlined the bigger trends in Qt, and where biggest development pushes are expected to be. Lars also talked about how he sees the next releases of Qt going forward. These topics continued in corridor discussions and during the evening party on Friday.<img class="alignright wp-image-45767" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/09/IMG_20160902_161511.jpg" alt="IMG_20160902_161511" width="400" height="608" /></p>
<p>My personal favourite talk was an &#8216;unconference session&#8217; that was reserved on location about Qt QUIPs, a way to arrange and manage the information related to the Qt project. I&#8217;m looking forward to seeing QUIPs in action, but it will naturally take a while for the developers to get all the bits and pieces together.</p>
<p>The Qt session videos will be available soon on the <a href="https://www.youtube.com/user/QtStudios" target="_blank">QtStudios YouTube channel</a>. However if you are really hungry to get at the videos, in the <a href="https://conf.qtcon.org/en/qtcon/public/schedule/2016-09-02" target="_blank">QtCon schedule</a> the talks that were in the bigger rooms already have the links added to the talk descriptions. For example <a href="https://conf.qtcon.org/en/qtcon/public/events/354">The Qt Project Status talk video is here</a>. The incredible speed at which the videos got online is entirely due to the hard and efficient work of the <a href="https://c3voc.de/" target="_blank">CCC Video Operations Center</a>, hats off to them!</p>
<p>In conclusion, I met old friend, new and interesting people, heard cool talks and had a good time. I&#8217;m sure the other attendees did too.</p>
<p>See you in coming events!</p>
<p>P.S. <a href="http://www.qtworldsummit.com/">Qt World Summit</a> is coming up soon 😉</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/08/qtcon-wrap-up/">QtCon wrap up</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/08/qtcon-wrap-up/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
<enclosure url="http://files.kde.org/akademy/2016/518_keynote_1_how_social_activists_are_using_open_data.mp4" length="20" type="video/mp4" />
<enclosure url="http://files.kde.org/akademy/2016/519_keynote_2__cultivating_empathy.mp4" length="20" type="video/mp4" />
<enclosure url="http://files.kde.org/akademy/2016/520_keynote_3_software_as_a_public_service.mp4" length="20" type="video/mp4" />
		</item>
		<item>
		<title>Creating Certified Medical Devices with Qt</title>
		<link>http://blog.qt.io/blog/2016/09/07/creating-certified-medical-devices-with-qt/</link>
		<comments>http://blog.qt.io/blog/2016/09/07/creating-certified-medical-devices-with-qt/#comments</comments>
		<pubDate>Wed, 07 Sep 2016 07:15:14 +0000</pubDate>
		<dc:creator><![CDATA[Matthias Hölzer-Klüpfel [Medical Devices Consultant]]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Embedded]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45747</guid>
		<description><![CDATA[<p>Many modern medical devices provide a graphical interface to the user. In dialysis machines, for example, touch screen interfaces to set up the treatment parameters and to monitor the treatment progress are commonplace. Qt is a viable technical solution to implement those interfaces, so it is used in quite a number of medical devices. When</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/07/creating-certified-medical-devices-with-qt/">Creating Certified Medical Devices with Qt</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><em><strong>Many modern medical devices provide a graphical interface to the user. In dialysis machines, for example, touch screen interfaces to set up the treatment parameters and to monitor the treatment progress are commonplace. Qt is a viable technical solution to implement those interfaces, so it is used in quite a number of medical devices.</strong></em></p>
<p>When designing and implementing a medical device, however, you have to do more than to find a good technical solution. You have to analyze the risks associated with your device, and you have to make sure that your system design and development is appropriate for that risk. That is not an easy task, but there are laws, regulations and standards that provide guidance on the required development process for medical device software. Important guidance documents are:</p>
<ul>
<li><a href="https://www.iso.org/obp/ui/#iso:std:iec:62304:ed-1:v1:en" target="_blank">IEC 62304: Medical device software – Software life cycle processes</a></li>
<li><a href="http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/GuidanceDocuments/ucm085281.htm" target="_blank">General Principles of Software Validation; Final Guidance for Industry and FDA Staff</a></li>
<li><a href="http://www.fda.gov/downloads/MedicalDevices/.../ucm073779.pdf" target="_blank">Guidance for Industry, FDA Reviewers and Compliance on Off-The-Shelf Software Use in Medical Devices</a></li>
</ul>
<p>If you develop software for a medical device that will be marketed in the EU and the US, you will have to follow those guidelines. They are mainly concerned with the process of designing, implementing, verifying and testing your own device software. But they also influence the use of third-party software like Qt in your device. If your third-party software, or SOUP (“Software of Unknown Provenance” in terms of IEC 62304), may contribute to a hazardous situation, i.e. might lead to harm to the patient, you have to minimize that contribution and make sure that the chosen third-party software is appropriate.</p>
<p>If we continue the example of a dialysis machine, one of the functions of the therapy &#8211; besides cleaning the blood of the patient &#8211; is to remove excess water from the body of the patient. Depending on the physical condition of the patient, up to four liters of water may be removed in a typical therapy session. But that is just the maximum amount, a patient might need less water removal, or none at all. The problem is that you have to enter the right amount of water to remove via the user interface, and it is critical that you do not remove more than that amount, as removing too much water might lead to a circulatory collapse and might severely harm the patient. Input of safety-critical values is a typical critical user interface function in medical devices, as well as the output of safety-critical values, e.g. the oxygen saturation of a patient’s blood.</p>
<p>Another critical user interface function that is common in medical devices is alarms. Imagine that during a dialysis therapy, the device detects that there is an air bubble in the blood line (which, when infused back into the patient, might lead to embolism). What the device probably should do is to stop the therapy, sound an alarm sound and display a visual warning to the operator of the device to take appropriate actions.</p>
<p>Obviously, if one of those functions fail to work correctly, the patient may be harmed. Now a manufacturer might ask some basic questions:</p>
<ul>
<li>1. What can we do to prevent the harm to the patient?</li>
<li>2. May we use Qt to implement those safety-critical user interface functions?</li>
<li>3. Do we need a validated toolkit to build a safety-critical user interface?</li>
</ul>
<p>Let&#8217;s start with the first question. It can only be answered by performing a detailed risk analysis. The standard ISO 14971 provides guidance on how to do this. In the example of the air-in-line alarm, we start with the hazard (the air bubble), determine the potential harm (which &#8211; in the worst case &#8211; is the death of the patient) and try to estimate the probability of the harm (for the sake of the example, let&#8217;s assume an air bubble once per 24 hours of treatment). If we combine those assumptions and estimates, we will find that the risk (the combination of the severity of the harm and the probability of its occurrence) is not acceptable. Thus we need to do something to reduce the risk. We might decide to add an air-bubble-detector into the system, and to add an alarm function to the user interface. When a bubble is detected, the system stops the therapy and raises the alarm to request the user to take appropriate action.</p>
<p>This is a reasonable first step, but not the end of our analysis. What happens if the alarm is not displayed? This could be caused by a problem with the display driver, or a failing LCD backlight, or by an unexpected failure of the GUI toolkit. A medical device needs to be safe even in the presence of a single fault in the system. So having an alarm system that might fail because of a single reason is not acceptable. Typical devices would therefore add another redundant and diverse alarm mechanism, e.g. a flashing LED that can be activated even when the GUI is not working properly. With this second channel, the alarm can be indicated even with a failure in the GUI or a failure in the LED mechanism. And this is generally considered to be safe. Of course, there is a cost &#8211; additional hardware.</p>
<p>There are other examples of diversity in graphical user interfaces: If we display a critical numerical value, we might be concerned that loading the correct font fails. Remember, we have to assume a first fault like a damaged font file. We can add some redundancy and display a bar graph visualizing the numerical value in addition to the number. Even if the numbers are not displayed correctly, the bar graph will present the information to the user. Sometimes you will see an old-fashioned LCD screen next to a touch screen on a medical device. This is a secure (if not pretty) way to add redundancy to the display system. The important point is that the resulting risk, even with a failure in the GUI, has to be acceptable.</p>
<p>Now we can tackle the second question: May we use Qt for the GUI of a safety critical medical device? Principally, the choice of technologies is up to the system designer. None of the standards will tell you to choose one toolkit over the other. The manufacturer of the medical device needs to make sure that it is safe, according to what has already been mentioned. But in addition to that, the IEC 62304 and the OTS require that we make a conscious decision about the choice third-party software or SOUP. In addition to the mentioned risk analysis, we need to make sure that:</p>
<ul>
<li>The toolkit provides the functionality and performance that we depend on</li>
<li>The device provides the support necessary to operate the toolkit within its specification</li>
<li>The toolkit performs as required for our system</li>
</ul>
<p>So a device manufacturer will have to provide evidence of these claims, i.e. will have to document the requirements to Qt, analyze and document the requirements imposed by Qt on the system and you will have to perform some degree of testing in the system to prove the requirements are met. And the manufacturer needs to set up a monitoring process to regularly check the bug list of the third-party software component and to assess if any new bugs impose additional risks to the patients. All of these points might be subject to an audit by a notified body or the FDA.</p>
<p>Very often the following question will be asked: Where can we buy a GUI toolkit that has already been validated to be suitable for use in safety-critical medical devices? Unfortunately, there is no such thing as a pre-validation for medical devices. As the starting point of third-party component validation is focused on the risk analysis, only the manufacturer of the device can do the qualification, because only the manufacturer can identify the risks. Therefore, IEC 62304 and the FDA regulations do not define a certification process for third-party software (SOUP). The best way a vendor can support a medical device manufacturer therefore is by providing good documentation of its development process and proof of internal testing, which allows the manufacturer to asses if it is appropriate for the planned application.</p>
<p>If you use a commercial license of Qt, <a href="https://www.qt.io/contact-us/" target="_blank">contact The Qt Company</a> and request a description of the QA practices and test report of the Qt version you intent to use. These documents are readily available and support your qualification effort.</p>
<p>To summarize, if you plan to use Qt for safety-critical functions in a medical device, make sure to:</p>
<ul>
<li>1. Identify all risks that might be caused by failures of the user interface</li>
<li>2. Try to mitigate those risks by means outside the user interface, e.g. by redundant inputs and outputs</li>
<li>3. Build redundancy into the user-interface itself to protect against single-fault failures</li>
<li>4. Carefully select the software components you use to implement the user interface</li>
<li>5. Document the rationale for your decision that Qt is appropriate for your device so it can be reviewed by external auditors</li>
</ul>
<p>If you follow those steps, you will be able to design your device with a modern user interface, and still meet all the safety requirements.</p>
<p><em><strong>About the Blog Post Author:</strong></em></p>
<p><a href="https://www.hoelzer-kluepfel.de" target="_blank">Matthias Hölzer-Klüpfel</a> is an independent consultant, trainer and contractor concerned with development processes and project management for medical device software. He co-founded the association “International Certified Professional for Medical Software Board e.V.” which provides the foundation for a certified education program for medical device software development.</p>
<p>You can reach Matthias via <a href="mailto:matthias@hoelzer-kluepfel.de" target="_blank">matthias@hoelzer-kluepfel.de</a> if you have any further questions.</p>
<p><em><strong>Earlier Blog Posts about Functional Safety with Qt:</strong></em></p>
<ul>
<li><a href="https://blog.qt.io/blog/2016/04/18/overview-of-functional-safety/" target="_blank">Overview of Functional Safety</a></li>
<li><a href="https://blog.qt.io/blog/2016/04/25/creating-certified-systems-with-qt" target="_blank">Creating Certified Systems with Qt</a></li>
</ul>
<p>If you are interested in hearing more about Functional Safety, there is a talk at <a href="http://www.qtworldsummit.com/" target="_blank">Qt World Summit</a> by Tuukka Turunen about <a href="http://www.qtworldsummit.com/sessions/creating-functional-safety-certified-systems-with-qt/" target="_blank">&#8216;Creating Functional Safety Certified Systems with Qt&#8217;</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/07/creating-certified-medical-devices-with-qt/">Creating Certified Medical Devices with Qt</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/07/creating-certified-medical-devices-with-qt/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Qt 5.8 Alpha released</title>
		<link>http://blog.qt.io/blog/2016/09/05/qt-5-8-alpha-released/</link>
		<comments>http://blog.qt.io/blog/2016/09/05/qt-5-8-alpha-released/#comments</comments>
		<pubDate>Mon, 05 Sep 2016 09:22:38 +0000</pubDate>
		<dc:creator><![CDATA[Lars Knoll]]></dc:creator>
				<category><![CDATA[News]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45738</guid>
		<description><![CDATA[<p>I’m happy to let you know that we have now reached our first milestone towards the release of Qt 5.8. The Alpha version of Qt 5.8 is now ready, and can be downloaded from download.qt.io or your Qt Account. As a new minor release, Qt 5.8 comes with a lot of new features as well</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/05/qt-5-8-alpha-released/">Qt 5.8 Alpha released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>I’m happy to let you know that we have now reached our first milestone towards the release of Qt 5.8. The Alpha version of Qt 5.8 is now ready, and can be downloaded from download.qt.io or your Qt Account. As a new minor release, Qt 5.8 comes with a lot of <a href="https://wiki.qt.io/New_Features_in_Qt_5.8">new features</a> as well as many bug fixes and improvements. We’ll go through all the new features in more detail as we get closer to the release. For now, let me just mention some of the biggest changes.</p>
<h3>New graphics architecture</h3>
<p>With Qt 5.8, the graphics architecture for Qt Quick has undergone a <a href="http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/">larger rewrite</a>. The goal was to remove the tight dependency of Qt Quick onto OpenGL that we have had since Qt 5.0, and make the architecture more agnostic with regards to the graphics API that is being used. The new infrastructure has been used to create a vastly improved Software rendering backend for Qt Quick, and a backend based on DirectX 12.</p>
<h3>QML caching</h3>
<p>The QML engine has also seen some major improvements with a new caching infrastructure, that can cache the QML files in a precompiled binary form. This infrastructure does help to significantly speed up loading of QML applications once the binary cache has been created. It also helps reduce memory consumption. Ahead of time compilation of Qt Quick continues to be supported through the commercial Qt Quick Compiler.</p>
<h3>Qt Lite Project and configurability</h3>
<p>Even though Qt is split up into many modules, it is a large framework with many features. Many of our customers are using only parts of them, and have been asking for an option to create tailored builds of Qt for their use case. This is especially important for embedded devices, where both RAM and Flash storage are often limited.</p>
<p>To accommodate this, we have over the last 6 months done significant work on our build infrastructure to give our users much more fine grained control over the way how Qt is being built. This is what we called the <a href="http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/">Qt Lite Project</a>. The basic infrastructure for this is now in place with the 5.8 Alpha, but we will be doing some more work on it while moving towards the Beta release.</p>
<p>With Qt 5.8, we will add a new tool to Qt for Device Creation, that will make it easier to tailor your Qt build and remove all the pieces of functionality that you are not using in your embedded project. From initial measurements, we expect that you will be able to reduce the size of a statically linked Qt Quick application by up to 70% compared to Qt 5.6.</p>
<h3>New modules</h3>
<p>The Wayland Compositor, SCXML and Serial Bus modules have now graduated from Technology Preview to being fully supported. In addition, we added Qt Speech and Qt Network Authentication (featuring OAuth support) as new Technology Previews.</p>
<h3>Timeline</h3>
<p>With the Qt 5.8 Alpha being released, we are now focusing fully towards finalizing a couple of remaining items, and plan to have the beta ready for you towards the beginning of October and Qt 5.8.0 final by end of November.</p>
<p>If you would like to hear more about all the cool new things coming with Qt 5.8, we will have in-depth talks about all of them at the <a href="https://www.qtworldsummit.com/">Qt World Summit</a> in San Francisco.</p>
<p>I hope you’ll enjoy the Qt 5.8 Alpha. Please download it from <a href="http://download.qt.io/development_releases/qt/5.8/">download.qt.io</a> or your <a href="https://account.qt.io/">Qt Account</a>, and don’t forget to give us feedback by writing to the mailing lists or reporting bugs.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/09/05/qt-5-8-alpha-released/">Qt 5.8 Alpha released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/09/05/qt-5-8-alpha-released/feed/</wfw:commentRss>
		<slash:comments>22</slash:comments>
		</item>
		<item>
		<title>New Forum theme and security notice</title>
		<link>http://blog.qt.io/blog/2016/08/30/new-forum-theme-and-security-notice/</link>
		<comments>http://blog.qt.io/blog/2016/08/30/new-forum-theme-and-security-notice/#comments</comments>
		<pubDate>Tue, 30 Aug 2016 15:16:05 +0000</pubDate>
		<dc:creator><![CDATA[Tero Kojo]]></dc:creator>
				<category><![CDATA[Community]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[forum]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45726</guid>
		<description><![CDATA[<p>Hello, Last week we updated the Qt Forum to the latest version of NodeBB. We had been planning the upgrade for a while, but had to do the upgrade on a quick notice, as a bug that leaked user emails was found in the forum. Thanks to Justin Clift for pointing out the issue to</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/30/new-forum-theme-and-security-notice/">New Forum theme and security notice</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Hello,</p>
<p>Last week we updated the <a href="https://forum.qt.io/" target="_blank">Qt Forum </a>to the latest version of NodeBB.</p>
<p>We had been planning the upgrade for a while, but had to do the upgrade on a quick notice, as a bug that leaked user emails was found in the forum. Thanks to Justin Clift for pointing out the issue to us!</p>
<p>This means that it was possible for someone to find out user emails from the forum. For those users who have their email as public, this is not a issue, but some of you want to keep your email to yourself. The bug meant that these email addresses could also be found.</p>
<p>No other data was available through the bug, and as we are using a central sign in service, no account information could leak from the forum.</p>
<p>So if you have gotten more email spam than normally this might be one cause.</p>
<p>We are sorry for the leak, but in our defence, we did not know of it, and patched the system in under a day of becoming aware of the issue.</p>
<p>But on to the upgrade itself.</p>
<p>With the upgrade we changed to the new default theme used by NodeBB. It looks quite different from the old theme, and has already gotten some for and against feedback. I personally am getting used to the look and feel, and after the initial shock, I like it. That&#8217;s a personal opinion, your mileage may vary, and please do tell us in the comments.</p>
<p>Due to the rushed upgrade some small things still need tweaking, the colours are a bit off from the Qt green, that will be fixed as soon as I find the time for it.</p>
<p>The reasoning for updating the theme, is that we can now follow the NodeBB upgrades faster, as we do not need to customise the theme as much as before. This will bring the improvement faster to you.</p>
<p>As an example new feature we now have chat rooms instead of one-to-one chats on the forum. To create a room, you can start a chat, and from the chat window settings add other users. At least for the Forum regulars this is quite an improvement.</p>
<p>So what do you think of the new Qt Forum look? Please tell us in the comments or drop by the forum to share your opinion.</p>
<p><em>Updated to credit Justin for finding the leak, thanks again!</em></p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/30/new-forum-theme-and-security-notice/">New Forum theme and security notice</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/30/new-forum-theme-and-security-notice/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Fast-Booting Qt Devices, Part 4: Hardware Matters</title>
		<link>http://blog.qt.io/blog/2016/08/30/fast-booting-qt-devices-part-4-hardware-matters/</link>
		<comments>http://blog.qt.io/blog/2016/08/30/fast-booting-qt-devices-part-4-hardware-matters/#comments</comments>
		<pubDate>Tue, 30 Aug 2016 13:42:24 +0000</pubDate>
		<dc:creator><![CDATA[Risto Avila]]></dc:creator>
				<category><![CDATA[Automotive]]></category>
		<category><![CDATA[Boot time]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Performance]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45328</guid>
		<description><![CDATA[<p>Welcome back! A while ago, I posted three parts of Fast-Booting Qt Devices blog post series where we showcased 1,5 second boot-time, optimized the Qt application and finally showed you how we optimized the entire Linux stack. Today, we will show you that hardware selection and hardware architecture in general can have a big impact</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/30/fast-booting-qt-devices-part-4-hardware-matters/">Fast-Booting Qt Devices, Part 4: Hardware Matters</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Welcome back!</p>
<p>A while ago, I posted three parts of Fast-Booting Qt Devices blog post series where we showcased <a href="http://blog.qt.io/blog/2016/04/20/fast-booting-qt-devices-part-1-automotive-instrument-cluster/" target="_blank">1,5 second boot-time</a>, <a href="http://blog.qt.io/blog/2016/04/27/fast-booting-qt-devices-part-2-optimizing-qt-application/" target="_blank">optimized the Qt application</a> and finally showed you how we <a href="http://blog.qt.io/blog/2016/05/25/fast-booting-qt-devices-part-3-optimizing-system-image/" target="_blank">optimized the entire Linux stack</a>. Today, we will show you that hardware selection and hardware architecture in general can have a big impact on the actual startup time even when using the same CPU. To demonstrate this, we have two boards with <a href="http://www.nxp.com/products/microcontrollers-and-processors/arm-processors/i.mx-applications-processors/i.mx-6-processors/i.mx6qp/i.mx-6quad-processors-high-performance-3d-graphics-hd-video-arm-cortex-a9-core:i.MX6Q" target="_blank">NXP i.MX6 Quadcore CPU</a>. One is a board geared towards software development, and the other is a system-on-module board aimed to be used in the production as well.</p>
<p>So, let&#8217;s a have a small Battle of the Boards! 🙂</p>
<p>On the left side, we have the <a href="http://www.nxp.com/products/software-and-tools/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6quad-applications-processors:RD-IMX6Q-SABRE" target="_blank">NXP SABRE  i.MX 6 Quad Development Board</a>:</p>
<ul>
<li>NXP i.MX 6 Quadcore processor, running at 1GHz</li>
<li>1GB DDR3 RAM</li>
<li>8GB eMMC</li>
</ul>
<p>On the right, we have <a href="https://www.toradex.com/computer-on-modules/apalis-arm-family/nxp-freescale-imx-6" target="_blank">Toradex Apalis i.MX 6 Computer on Module</a>:</p>
<ul>
<li>NXP i.MX 6 Quad core processor, running at 1GHz</li>
<li>1GB DDR3 RAM</li>
<li>4GB eMMC</li>
</ul>
<p>Both boards are running exactly the same Qt Cluster demo, kernel configurations and u-boot.</p>
<p><iframe width="500" height="281" src="https://www.youtube.com/embed/V-a6KO7SK2g?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>Toradex Computer on Module is a clear winner with 19% (294 ms) faster startup time. Our earlier fast-boot example with the NXP SABRE resulted in a very good 1560 ms from power up to display of the first full screen Qt Quick frame. Now, with the Toradex board, we got an even faster <em><strong>1266 ms</strong></em>.</p>
<p>Where does the difference come from?</p>
<ul>
<li>Powering up of the board is faster with Toradex module</li>
<li>Kernel is able to access eMMC earlier resulting into a faster kernel startup time</li>
</ul>
<p>So, when designing your embedded devices, remember that hardware selection does matter too. If you need to reach blazing fast startup time, it certainly helps to have fast memory and memory bus, well optimized bootloader and kernel, as well as of course a powerful chip that can quickly crunch through the libraries you need to load. The rest is then up to your software&#8211;even with the optimized hardware you can ruin your boot-up time with a sloppy software design. For those tips, check out the earlier posts in this series.</p>
<p>If you are interested in hearing more, I will be talking about <a href="http://www.qtworldsummit.com/sessions/fast-booting-into-qt-application-on-embedded-linux/" target="_blank">fast-boot of Qt based devices</a> at the <a href="http://www.qtworldsummit.com/" target="_blank">Qt World Summit</a> in San Francisco, October 18-20. We are looking forwards to seeing you there, and hearing your feedback!</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/30/fast-booting-qt-devices-part-4-hardware-matters/">Fast-Booting Qt Devices, Part 4: Hardware Matters</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/30/fast-booting-qt-devices-part-4-hardware-matters/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Embedded Systems Are the Backbone of IoT, but It&#8217;s Software That Brings It All Together</title>
		<link>http://blog.qt.io/blog/2016/08/29/embedded-systems-are-the-backbone-of-iot-but-its-software-that-brings-it-all-together/</link>
		<comments>http://blog.qt.io/blog/2016/08/29/embedded-systems-are-the-backbone-of-iot-but-its-software-that-brings-it-all-together/#comments</comments>
		<pubDate>Mon, 29 Aug 2016 10:57:50 +0000</pubDate>
		<dc:creator><![CDATA[Tuukka Ahoniemi]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Internet of Things]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45597</guid>
		<description><![CDATA[<p>Smoking hot terms like Big Data and the Internet of Things or &#8220;IoT&#8221; have taken their place in conventional business lingo, and it’s practically impossible to avoid these terms — everyone has recognized what developers have seen for many years. New applications for your products, new opportunities for your offering, new customer areas are emerging,</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/29/embedded-systems-are-the-backbone-of-iot-but-its-software-that-brings-it-all-together/">Embedded Systems Are the Backbone of IoT, but It&#8217;s Software That Brings It All Together</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Smoking hot terms like Big Data and the Internet of Things or &#8220;IoT&#8221; have taken their place in conventional business lingo, and it’s practically impossible to avoid these terms — everyone has recognized what developers have seen for many years. New applications for your products, new opportunities for your offering, new customer areas are emerging, and the time to re-think how you apply connectivity, mash-ups and various sensors is going mainstream. As the business potential has started to materialize, we see that the ecosystem around IoT begins to intensify and expand, strengthening the backbone of IoT, as it shifts into high gear.</p>
<p><a href="https://www.qt.io/whitepapers" target="_blank"><img class="wp-image-45667" style="float: right;padding-left: 16px" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/Qt_Top-5-considerations-infographics_15082016-section-5_CR.png" alt="Qt Top 5 Considerations IoT infographic" width="400" height="734" /></a>You could argue that the Internet of Things is simply the connected embedded system re-coined. These systems are already around us and machine-to-machine (M2M) systems have been chatting to each other for decades. But in addition to just the technical capabilities between embedded devices, IoT also includes the aspect of<em> The Omnipresent Cloud</em> and mobile client access, shifting the <em>way we use</em> these connected embedded systems. And <em>that</em> then enables all the new IoT innovations, but also affects how we need to <em>design</em> these systems, especially from software perspective: Instead of creating a self-contained embedded device with an online connection, we are designing complex and extensible systems with connected sensors, embedded devices, a cloud back-end and mobile clients. <strong><em>*Poof*</em> Embedded software design just became exponentially more complex.</strong></p>
<p>As computers (and sensors) get smaller, smarter and connected, our everyday objects, from clothing to lavatories to cars, get more intelligent. Although hardware has center stage, it’s time to start looking at <em>the software</em> that will bring it all together.</p>
<h2><strong>Embedded Development Can Be Modern, Too </strong></h2>
<p>In the past ten years, there has been a tremendous leap in how software is developed. <em>Modern software development</em> in general seems to be about finding new ways of working even more agile, adopting new techniques quickly, abandoning non-working ones, moving rapidly forward with continuously deployed changes and near-realtime iterations in a harmonious telepathy between the customer and a self-guiding and proactive development team.</p>
<p>Modern software development is naturally <em>awesome</em>, but unfortunately, in embedded software development one can too rarely apply any of the stuff <em>the cool kids in the web/mobile world</em> are hyping about. Because of industry-related verification/certification requirements and especially the technical limitations of embedded cross-compilation workflow, I still hear <em>waterfalls</em> in the distance. At the same time, when we’re supposed to create these complex and innovative IoT things with modern touch UIs, we can’t afford to have development cycles that take weeks for each iteration of a simple UI tweak. The markets need to be reached faster! This is what we want to change with Qt—we want to make embedded development as seamless as desktop or mobile development. We want to provide one technology for all embedded and mobile platforms &#8212; and enable rapid deployment cycles for the whole IoT system.</p>
<p>Qt libraries give you various UI approaches for creating a unified UX between your embedded and mobile devices. In addition, there are plenty of high-level Qt APIs for creating the engine of your IoT gateways: eg. Bluetooth LE for sensor communication and built-in JSON support for cloud communication. Qt Creator IDE works on all platforms, supports direct deployment to desktop, embedded and mobile targets and includes all the tools for designing, developing, debugging, profiling and analyzing your code. You can do rapid prototyping on your laptop and push the build to your embedded hardware or mobile device to see the changes there.</p>
<ul>
<li>Support multiple devices with or without screens</li>
<li>Leverage your core communication libraries between a desktop interface and a mobile gadget</li>
<li>Share code with other IoT developers building different parts of the ecosystem</li>
</ul>
<p>To learn why having an embedded tool that has powerful UX capabilities can make the difference for your business: <a href="https://www.qt.io/whitepapers" target="_blank">Read the whitepaper &#8220;Building the Internet of Things and How Qt Can Help&#8221;. </a></p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/29/embedded-systems-are-the-backbone-of-iot-but-its-software-that-brings-it-all-together/">Embedded Systems Are the Backbone of IoT, but It&#8217;s Software That Brings It All Together</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/29/embedded-systems-are-the-backbone-of-iot-but-its-software-that-brings-it-all-together/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Qt Creator 4.1.0 released</title>
		<link>http://blog.qt.io/blog/2016/08/25/qt-creator-4-1-0-released/</link>
		<comments>http://blog.qt.io/blog/2016/08/25/qt-creator-4-1-0-released/#comments</comments>
		<pubDate>Thu, 25 Aug 2016 12:09:07 +0000</pubDate>
		<dc:creator><![CDATA[Eike Ziller]]></dc:creator>
				<category><![CDATA[Biz Circuit & Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[QtCreator]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45587</guid>
		<description><![CDATA[<p>We are happy to announce the release of Qt Creator 4.1.0. Themes We added Flat Light and Flat Dark themes, complementing the Flat theme which was added in 4.0. They are available in the Environment &#62; Interface &#62; Theme settings. We also added some more editor color schemes which you find in Text Editor &#62; Fonts &#38; Colors.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/25/qt-creator-4-1-0-released/">Qt Creator 4.1.0 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We are happy to announce the release of Qt Creator 4.1.0.</p>
<p><a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatDarkQtCreator41.png"><img style="width: 300px;height: 186px;float: left" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatDarkQtCreator41.png" alt="Flat Dark Theme - Qt Creator 4.1" /></a><a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatLightQtCreator41.png"><img style="width: 300px;height: 186px;float: clear" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatLightQtCreator41.png" alt="Flat Light Theme - Qt Creator 4.1" /></a></p>
<p><b>Themes</b></p>
<p>We added <em>Flat Light</em> and <em>Flat Dark</em> themes, complementing the <em>Flat</em> theme which was added in 4.0. They are available in the <em>Environment &gt; Interface &gt; Theme</em> settings. We also added some more editor color schemes which you find in <em>Text Editor &gt; Fonts &amp; Colors</em>.</p>
<p><strong>Editing</strong></p>
<p>Text Editors now behave much better with regards to automatically inserting and skipping characters. If you type a quote or bracket, the corresponding closing character is added. If you remove the opening character, it is removed again. If you type the closing character yourself, it replaces the automatically inserted one. Both of these now only happen as long as the text cursor did not move away from the closing character. You can also configure automatic insertion of brackets and quotes individually in the <em>Text Editor &gt; Completion</em> settings.</p>
<p><strong>C++</strong></p>
<p>Aside from fixing bugs in the code model and static analyzer integration, we also updated our binary packages to use Clang 3.8.1, which also fixes many issues, especially with MSVC. We also added a more <a href="https://reviews.llvm.org/D20492">recent patch</a> to Clang that makes it work better with MSVC2015 Update 3.</p>
<p><strong>Qt Quick</strong></p>
<p>Both Qt Quick Designer and QML Profiler received many performance improvements. You can now choose a Qt Quick Controls 2 style which Qt Quick Designer uses to render your items. The new <em>Move to Component</em> action moves an item and its contents into a separate file.</p>
<p><strong>CMake</strong></p>
<p>Many bugs were fixed for supporting CMake projects, and the workflow further improved. CMake is only run automatically if Qt Creator is the active application, and you can turn automatic running completely off (<em>Build &amp; Run &gt; CMake</em>). If you set the <em>QML_IMPORT_PATH</em> variable in the CMake cache for your project, Qt Creator picks this up and feeds it to the QML code model, so you can access your QML imports in the editor. (Example CMake code: <code>set(QML_IMPORT_PATH ${CMAKE_SOURCE_DIR}/qml ${CMAKE_BINARY_DIR}/imports CACHE string "" FORCE)</code>)</p>
<p><strong>Other improvements</strong></p>
<p>If you turn on the plugin (<em>Help &gt; About Plugins</em>, or <em>Qt Creator &gt; About Plugins</em> on macOS), Qt Creator gains experimental support for the <a href="http://nim-lang.org">Nim programming language</a>. Many thanks to Filippo Cucchetto for this contribution. It supports syntax highlighting, indentation, coding style settings, and simple project management, including building, running and debugging applications.</p>
<p>All this is just a small excerpt from all the changes and improvements that you find in Qt Creator 4.1.0. Find out more in our <a href="https://code.qt.io/cgit/qt-creator/qt-creator.git/tree/dist/changes-4.1.0.md?h=4.1">change log</a>, or just go ahead, download and try it for yourself!</p>
<p><strong>Get Qt Creator 4.1.0</strong></p>
<p>The opensource version is available on the <a href="https://www.qt.io/download-open-source/#section-9">Qt download page</a>, and you find commercially licensed packages on the <a href="https://login.qt.io/">Qt Account Portal</a>. Qt Creator 4.1.0 is also available through an update in the online installer. Please post issues in our <a href="https://bugreports.qt.io/">bug tracker</a>. You can also find us on IRC on #qt-creator on chat.freenode.net, and on the <a href="http://lists.qt-project.org/mailman/listinfo/qt-creator">Qt Creator mailing list</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/25/qt-creator-4-1-0-released/">Qt Creator 4.1.0 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/25/qt-creator-4-1-0-released/feed/</wfw:commentRss>
		<slash:comments>48</slash:comments>
		</item>
		<item>
		<title>Introducing the Qt Lite project—Qt for any platform, any thing, any size</title>
		<link>http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/</link>
		<comments>http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/#comments</comments>
		<pubDate>Thu, 18 Aug 2016 10:07:33 +0000</pubDate>
		<dc:creator><![CDATA[Nils Christian Roscher-Nielsen]]></dc:creator>
				<category><![CDATA[Biz Circuit & Dev Loop]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45533</guid>
		<description><![CDATA[<p>We believe in a future of great software and hardware, developed together, delivered quickly, and that you can have fun in the process. Embedded development should be just as simple as all other software development, and you should immediately see the result of your ideas running on your device. The amount of devices and things</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/">Introducing the Qt Lite project—Qt for any platform, any thing, any size</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We believe in a future of great software and hardware, developed together, delivered quickly, and that you can have fun in the process. Embedded development should be just as simple as all other software development, and you should immediately see the result of your ideas running on your device.</p>
<p>The amount of devices and things surrounding us are rapidly increasing, becoming more intelligent and requiring software that runs on a greater variety of hardware—everything from IoT devices with or without a screen, smart watches through to high end smart TVs and industrial grade PCs. As the requirements and the world of software development is changing so does Qt. We have taken action and are now unveiling the Qt Lite Project. This is a whole range of changes to Qt, allowing you to strip Qt down and bring in exactly what you need in order to create your device for more or less any platform and any thing &#8211; regardless of size. Qt Lite is neither a separate product nor a fork of Qt—it is all built into Qt allowing us to efficiently develop and maintain it as part of the whole Qt framework. As such, many of these changes will benefit all Qt users, but especially those targeting resource-constrained devices.</p>
<p>For the past 20 years, Qt has been used on a massively wide range of operating systems and embedded devices. It didn’t take long before embedded Linux was as important for Qt as its desktop counterpart, but many other embedded operating systems have also followed this trend, and Qt has supported a wide range of Linux, Microsoft and various real time operating systems (RTOS).</p>
<p>However, to efficiently utilize Qt on these operating systems, and especially on those embedded devices—special as they often are—it has sometimes been challenging and time consuming to configure Qt to efficiently use the different hardware components, available libraries, and strip out the parts of Qt and the OS that are not needed.</p>
<p>Over the past six months we have looked at many of these challenges—and more—and been working on making Qt a much more targeted framework that will facilitate the whole development cycle and lifetime of embedded device based products. In this blog post we will look at some of the changes, we have made as well as the path beyond that. All of these efforts are part of &#8220;Project Qt Lite&#8221;.</p>
<p><strong>The configuration system</strong></p>
<p>We know that Qt is being used in many different projects, varying industries and for vastly different purposes. So making one change, or one optimal version of Qt is not feasible. Therefore the starting point, and the biggest code change coming as a part of our embedded effort for Qt 5.8, is a new configuration system. When we introduced Qt 5, we had a lot of focus on the modularization of Qt, so it was less monolithic. The modules became less dependent on each other, could easily be developed, tested and deployed independently. But configuring the content of each module was still difficult, so optimizing for a resource-constrained embedded system was not as straight forward as we would like it to be. If you needed a specific feature, like a specific way of handling internationalization or audio functionality, or broader multimedia features, you often needed to add in several new modules, where you would only use a fraction of the functionality. Enabling one single feature exclusively required a lot of manual tweaking, and that took a lot of time.</p>
<p>The new configuration system in Qt, allows your define the content you need from each module in much more detail for your project and easily allows for feature based tailoring of the Qt modules. We are starting with enabling this fully for Qt Core, Qt Network, Qt GUI, Qt QML and Qt Quick. You can now fine tune which features from these modules you want to include in your project. There is no longer any need to include unnecessary features. We will also expand this to be more granular and cover more modules in the time to come.</p>
<p><strong>Developer Workflow </strong></p>
<p>Moving forwards we want to put focus on a development workflow that has optimization in mind from the very beginning. In a world where hardware is getting cheaper, most frameworks do not care much for footprint or memory consumption — all libraries are included from the get go, all features enabled and options checked. This makes feature development simple, but optimization so much harder. Qt Lite now allows you to start with a minimal deployable configuration, and allows you to simply add in any additional feature you will require while developing your project.</p>
<p>This leaves you in complete control, with a continuous understanding of the consequences of your actions, and allows for transparency of the development project throughout the team. How big is the application developed becoming? Is this web browser really needed? And do cutting these corners actually make sense? Every included feature and added module will be immediately visible, and you will know how it affects the overall footprint of the application.</p>
<p>To facilitate this, we will start by provide two different reference configurations as a part of Qt Lite:</p>
<p>Firstly, a full prototyping environment, like for example the configuration behind our demo images as they are shipped with Qt for Device Creation today. This is a great starting point for a mid-cost, low volume distribution for example, it has all features enabled and can quickly and easily be used in products.</p>
<p>In addition to that we also want to add another Qt configuration that is as minimal as possible. This will provide a great starting point for software that needs a smaller footprint, high performance and still be delivered quickly to the market. By significantly reducing the time spent on optimization at the end of the project, products can have a much faster time-to-market.</p>
<p><strong>No Open GL Requirement</strong></p>
<p>One of the main drivers behind the Qt Quick and QML technology, was to introduce a rendering architecture optimized for OpenGL. However, that also meant that OpenGL became a requirement for all Qt Quick based projects. For several good reasons, we see the need for cheaper, more efficient or specially certified hardware that does not support OpenGL. In Qt we have therefore introduced a fully integrated, supported and efficient <a href="http://doc.qt.io/QtQuick2DRenderer/index.html">2D Software Renderer for Qt Quick</a>. This allows you to use all the power of the QML language to create beautiful user interfaces on embedded devices without OpenGL hardware available.</p>
<p>The Qt Quick 2D renderer can work in software only, but it is also designed to utilize accelerated 2D operations, for devices that packs a little bit more punch, but still doesn’t have full OpenGL support.</p>
<p><strong>Tooling</strong></p>
<p>Along with the new configuration system, we have also developed a new graphical tool for configuring, selecting and setting various options when building Qt. These configurations can be saved and reused. This will also make it easier to modify your configurations for new hardware, or changing requirements.</p>
<p>The Qt configuration tooling is now even more powerful and feature rich than ever before. By making all the options available easily accessible, integrating the documentation and providing reasonable starting default configurations for various use cases, you get a simple and efficient way to squeeze a lot more juice out of your existing projects.</p>
<p>We are currently working on a way to sort configuration options into groups, so that you can easily see which configurations need to work together to enable use cases like internationlization, multimedia, web capabilities or other features. You can of course save these configurations and profiles, to continue using with other builds, version so of Qt, or new hardware. These tools will be integrated as a part of Qt for Device Creation.</p>
<p><strong>Targets</strong></p>
<p>A major part of our focus, is on extending the available hardware that you can easily and efficiently use to deploy Qt based applications. There are several devices and project types that can benefit from our current efforts. A typical example can be devices with RAM and Flash in the 32MB or even 16 MB area, with the intention to go much lower in the future. Also, there is no longer any need for OpenGL hardware to use Qt Quick, which extends the number of devices where Qt can be used significantly.</p>
<p>The main usage of this is still expected to the be Cortex A based architecture, or similar, but we are also aiming at the ARM Cortex M7, as one example.</p>
<p><strong style="line-height: 1.5">And the list goes on</strong></p>
<p>There is a myriad of other features all enhancing the embedded developer experience and device creation workflow on resource-constrained devices, coming with Qt 5.8. We are further developing the Qt Quick Controls 2, that are specially designed for touch-enabled devices, and are introducing many new features as well as improvements and new themes.</p>
<p>We have put a lot of effort into our new Over-the-Air update mechanism. It is also a part of Qt for Device Creation for Qt 5.8, and we have already <a href="http://blog.qt.io/blog/2016/05/31/over-the-air-updates-part-1-introduction/">blogged</a> about it in great <a href="http://blog.qt.io/blog/2016/06/28/over-the-air-updates-part-2-device-integration-api-and-creating-updates/">detail</a>. This is a part of our continuous push to make device creator&#8217;s life simpler, shorten time-to-market, and reduce the total cost of a project, by providing an extremely powerful way of managing your device life cycle.</p>
<p>The Qt Wayland based compositor makes it simple to create fully fledged multi applications devices. But we are also improving EGLFS, and enhancing the multi-screen capabilities.</p>
<p>And the Qt Emulator that ships with Qt Creator makes it very simple to quickly iterate over designs and optimize applications, even without the target hardware available to all developers in the project.</p>
<p><strong>An open road ahead </strong></p>
<p>We have for a long time been putting a lot of emphasis on the embedded space, for example with our Qt for Device Creation product, and we will continue this effort relentlessly. And we don’t want that effort just to be an internal project, but we want you to know about it. Because it is all about you, and what you can achieve when creating your products. Our aim is to improve Qt, making it more light weight, easier to use, and performing better than ever before. To achieve this, we need your feedback.</p>
<p>We will continue our work making Qt a better framework for embedded projects of all kinds, running on devices in a wide range of industries. We have many exciting plans and we are working with some really interesting customers to bring great projects to the market. Examples being the Automotive systems based on Qt, the usage in the Avionics industry and the work we do with home appliances amongst many other Qt based projects. IoT is another important part of our strategy ahead, and making sure that all devices can be developed with a Qt based platform, communicate over supported protocols and that software can easily be extended to the next generation device is extremely important in a wide range of industries today.</p>
<p>The next stage of Qt Lite—as soon as the essentials are in place—will be along three major lines.</p>
<p>Firstly, code optimizations to improve the run time performance and the RAM consumption. This will require a lot of code changes, in many different places of Qt. Some of these changes might not be fully source compatible with Qt, but believe that such embedded projects can make that sacrifice for the sake of performance. This is important—but difficult—work, and some of our best developers are on it.</p>
<p>Secondly we will spend a lot of time on the configuration of the full stack, not just the Qt libraries. With Qt for Device Creation we offer an out-of-the-box embedded Linux stack based on Yocto. We will also extend the new configuration system to cover and optimize the complete Linux stack as well as the Qt build. This will allow you to easily and efficiently improve the total footprint, boot time and complexity of your system, not just the Qt bits.</p>
<p>The third avenue of improvement will be to more fully integrate all the tooling around this, to bring all the elements into the same tool, and integrate this into Qt Creator. We think this can improve not only the developer experience, but also the communication in the whole team, provide more transparency towards other stakeholders and reduce the total time/cost of a project.</p>
<p>In summary, we have now laid the foundation of how to more efficiently address embedded development, and how to make the most of resource-constrained hardware. A configuration architecture that makes it simpler to build Qt according to your needs, and improves the performance on resource-constrained devices. We have improved Qt a lot. But we have also staked out on a clear path towards further improvements. The focus forwards will be on making Qt even faster, smaller and easier to work with. We are very much looking forwards to your feedback and feature requests, and hope all your projects are successful. If you are interested in participating in that future, to provide feedback or learn more about this, both our CTO Lars Knoll and myself will be <a href="http://www.qtworldsummit.com/sessions/qt-lite-where-is-qt-going/">talking</a> about this subject at the <a href="http://www.qtworldsummit.com/">Qt World Summit</a> in San Francisco, October 18-20. We are looking forwards to seeing you there, and gaining your feedback!</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/">Introducing the Qt Lite project—Qt for any platform, any thing, any size</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/18/introducing-the-qt-lite-project-qt-for-any-platform-any-thing-any-size/feed/</wfw:commentRss>
		<slash:comments>29</slash:comments>
		</item>
		<item>
		<title>The Qt Quick Graphics Stack in Qt 5.8</title>
		<link>http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/</link>
		<comments>http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/#comments</comments>
		<pubDate>Mon, 15 Aug 2016 09:36:25 +0000</pubDate>
		<dc:creator><![CDATA[Laszlo Agocs]]></dc:creator>
				<category><![CDATA[Declarative UI]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Graphics]]></category>
		<category><![CDATA[OpenGL]]></category>
		<category><![CDATA[Painting]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Qt Quick]]></category>
		<category><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=44802</guid>
		<description><![CDATA[<p>This is a joint post with Andy. In this series of posts we are going to take a look at some of the upcoming features of Qt 5.8, focusing on Qt Quick. OpenGL&#8230; and nothing else? When Qt Quick 2 was made available with the release of Qt 5.0, it came with the limitation that</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/">The Qt Quick Graphics Stack in Qt 5.8</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><em>This is a joint post with <a href="https://blog.qt.io/blog/author/andynichols/">Andy</a>. In this series of posts we are going to take a look at some of the upcoming features of Qt 5.8, focusing on <a href="http://doc.qt.io/qt-5/qtquick-index.html">Qt Quick</a>.</em></p>
<h2>OpenGL&#8230; and nothing else?</h2>
<p class="p1"><span class="s1">When Qt Quick 2 was made available with the release of Qt 5.0, it came with the limitation that support for OpenGL (ES) 2.0 or higher was required.<span class="Apple-converted-space">  </span>The assumption was that moving forward OpenGL would continue its trajectory to be the hardware acceleration API of choice for both desktop, mobile and embedded development. Fast forward a couple years down the road to today, and the graphics acceleration story has gotten more complicated.<span class="Apple-converted-space">  </span>One assumption we made was that the price of embedded hardware with OpenGL GPUs would continue to drop and they would be ubiquitous.<span class="Apple-converted-space">  </span>This is true, but at the same time there are still embedded devices available without OpenGL-capable GPUs where customers continue to wish to deploy Qt Quick applications.<span class="Apple-converted-space">  </span>To remedy this we released the <a href="http://doc.qt.io/QtQuick2DRenderer/">Qt Quick 2D Renderer</a> as separate plugin for Qt Quick in Qt 5.4.</p>
<p class="p1"><span class="s1">At the same time it turned out that Qt Quick applications deployed on a wide range of machines including older systems often have issues with OpenGL due to missing or unavailable drivers, on Windows in particular. Around Qt 5.4 <a href="http://doc.qt.io/qt-5/windows-requirements.html#dynamically-loading-graphics-drivers">the situation got improved</a> with the ability to dynamically choose between OpenGL proper, <a href="https://chromium.googlesource.com/angle/angle/+/master/README.md">ANGLE</a>, or a <a href="http://www.mesa3d.org/llvmpipe.html">software OpenGL rasterizer</a>. However, this does not solve all the problems and full-blown software rasterizers are clearly not an option for low-end hardware, in particular in the embedded space. All this left us with the question of why not focus more on the platforms&#8217; native, potentially better supported APIs (for example, Direct3D), and why not improve and integrate the 2D Renderer closer with the rest of the Qt Quick instead of keeping it a separate module with a somewhat arcane installation process.</p>
<h2>Come other APIs</h2>
<p>Meanwhile, the number of available graphics hardware APIs has increased since the release of Qt Quick 2. Now rather than the easy to understand Direct3D vs OpenGL choice, there is a new generation of lower level graphics APIs available: <a href="https://www.khronos.org/vulkan/">Vulkan</a>, <a href="https://developer.apple.com/metal/">Metal</a>, and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn899228(v=vs.85).aspx">Direct3D 12</a>. So for Qt 5.8 we decided to explore how we can make Qt Quick more future proof, as introduced in <a href="http://blog.qt.io/blog/2016/01/28/qt-and-direct3d-12-first-encounter/">this previous post</a>.</p>
<h2>Modularization</h2>
<p>The main goal for the ScenegraphNG project was to modularize the Qt Quick Scene graph API and remove the OpenGL dependencies in the renderer.<span class="Apple-converted-space">  </span>By removing the strong bindings to OpenGL and enhancing the scenegraph adaptation layer it is now possible to implement additional rendering backends either built-in to Qt Quick itself or deployed as dynamically loaded plugins. OpenGL will still be the default backend with full compatibility for all existing Qt Quick code. The changes are not just about plugins and moving code around, however. Some internal aspects of the scenegraph, for instance the material system, exhibited a very strong OpenGL coupling which could not be worked around in a 100% compatible manner when it comes to the public APIs. Therefore some public scenegraph utility APIs got deprecated and a few new ones got introduced. At the time of writing work is still underway to modularize and port some additional components, like the sprite and particle systems, to the new architecture.</p>
<p>
To prove that the changes form a solid foundation for future backends, Qt 5.8 introduces <a href="http://doc-snapshots.qt.io/qt5-dev/qtquick-visualcanvas-adaptations-d3d12.html">an experimental Qt Quick backend for Direct3D 12</a> on Windows 10 (both traditional Win32 and <a href="https://en.wikipedia.org/wiki/Universal_Windows_Platform">UWP</a> applications). In the future it will naturally be possible to create a Vulkan backend as well, if it is deemed beneficial. Note that all this has nothing to do with the approaches for integrating custom rendering into QWidget-based or plain QWindow applications. There adding Vulkan or D3D12 instead of OpenGL is possible already today with the existing Qt releases, see for instance <a href="https://github.com/alpqr/qtvulkan">here</a> and <a href="https://blog.qt.io/blog/2016/01/28/qt-and-direct3d-12-first-encounter/">here</a>.</p>
<h2>Qt Quick 2D Renderer, integrated</h2>
<p>The Qt Quick 2D Renderer was the first non-OpenGL renderer, but when released, it lived outside of the qtdeclarative code base (which contains the QtQml and QtQuick modules) and carried a commercial-only license. In Qt 5.7 the Qt Quick 2D Renderer was made available under GPLv3, but still as a separate plugin with the OpenGL requirement inherited from Qt Quick itself. In practice this got solved by building Qt against dummy libGLESv2 library, but this was neither nice nor desirable long-term. With Qt 5.8 the Qt Quick 2D renderer is merged into qtdeclarative as the built-in software rendering backend for the Qt Quick SceneGraph. The code has also been relicensed to have the same licenses as QtDeclarative. This also means that stand-alone 2D renderer plugin is no longer under development and the <em>qtdeclarative-render2d</em> repository will become obsolete in the future.</p>
<h2>Supercharging the 2D Renderer: Partial updates</h2>
<p>The 2D Renderer, which is now referred to mostly as the software <em>backend</em> (or <em>renderer</em> or <em>adaptation</em>), is getting one huge new feature that was not present in the previous standalone versions: partial updates. Previously it would render the entire scene every frame from front to back, which meant that a small animation in a complicated UI could be very expensive CPU-wise, especially when moving towards higher screen resolutions. Now with 5.8 the software backend is capable of only rendering what has changed between two frames, so for example if you have a blinking cursor in a text box, only the cursor and area under the cursor will be rendered and copied to the window surface, not unlike how the traditional QWidgets would operate. A huge performance improvement for any platform using the software backend.</p>
<h2>QQuickWidget with the 2D Renderer</h2>
<p>Another big feature that the new software backend introduces with Qt 5.8 is support for <a href="http://doc.qt.io/qt-5/qquickwidget.html">QQuickWidget</a>. The Qt Quick 2D Renderer was not available for use in combination with QQuickWidget, which made it impossible for apps like Qt Creator to fall back to using the software renderer. Now because of the software renderer&#8217;s closer integration with QtDeclarative it was possible to enable support for the software renderer with QQuickWidget. This means that applications using simple Qt Quick scenes without effects and heavy animation can use the software backend in combination with QQuickWidget and thus avoid potential issues when deploying onto older systems (think the OpenGL driver hassle on Windows, the trouble with remoting and X forwarding, etc.). It is important to note that not all types of scenes will perform as well with software as they do with OpenGL (think scrolling larger areas for instance) so the decision has to be made after investigating both options.</p>
<h2>No OpenGL at all? No problem.</h2>
<p>One big limitation of the Qt Quick 2D Renderer plugin was that in order to build QtDeclarative, you still had to have OpenGL headers and libraries available. So on devices that did not have OpenGL available you had to use provided &#8220;dummy&#8221; libraries and headers to trick Qt into building QtDeclarative and then enforce your developers not to call any code that could call into OpenGL. This always felt like a hack, but with the hard requirement in QtDeclarative there was no better options available. Until now. In Qt 5.8 this is not an issue because QtDeclarative can now be built without OpenGL. In this case the software renderer becomes the default backend instead of OpenGL. So whenever Qt is configured with <em>-no-opengl</em> or the development environment (sysroot) lacks OpenGL headers and libraries, the QtQuick module is no longer skipped. In 5.8 it will build just fine and default to the software backend.</p>
<h2>Switching between backends</h2>
<p>Now that there are multiple backends that can render Qt Quick we also needed to provide a way to switch between which API is used. The approach Qt 5.8 takes mirrors how QPA platform plugins or the OpenGL implementation on Windows are handled: the Qt Quick backend can be changed on a per-process basis during application startup. Once the first QQuickWindow, QQuickView, or QQuickWidget is constructed it will not be possible to change it anymore.</p>
<p>
To specify the backend to use, either set the environment variable <em>QT_QUICK_BACKEND</em> (also known as <em>QMLSCENE_DEVICE</em> that is inherited from previous versions) or use the C++ API of the static functions <a href="http://doc-snapshots.qt.io/qt5-dev/qquickwindow.html#setSceneGraphBackend">QQuickWindow provides</a>. When no request is made, a sensible default will be used. This is currently the OpenGL backend, except in Qt builds that have OpenGL support completely disabled.</p>
<p>As an example, let&#8217;s force the software backend in our application:</p>
<pre class="brush:cpp">
int main(int argc, char **argv)
{
    // Force the software backend always.
    QQuickWindow::setSceneGraphBackend(QSGRendererInterface::Software);
    QGuiApplication app(argc, argv);
    QQuickView view;
    ...
}
</pre>
<p>Or launch our application with the D3D12 backend instead of the default OpenGL (or software):</p>
<pre>
C:\MyCoolApp&gt;set QT_QUICK_BACKEND=d3d12
C:\MyCoolApp&gt;debug\MyCoolApp.exe
</pre>
<p>To verify what is happening during startup, set the environment variable <em>QSG_INFO</em> to <em>1</em> or enable the logging category <em>qt.scenegraph.general</em>. This will lead to printing a number of helpful log messages to the debug or console output, depending on the type of the application. To monitor the debug output, either run the application from Qt Creator or use a tool like <a href="https://technet.microsoft.com/en-us/sysinternals/debugview.aspx">DebugView</a>.</p>
<p>With an <a href="https://github.com/alpqr/qt5-cinematic-experience">updated version</a> of the <a href="http://quitcoding.com/?page=work#cinex">Qt 5 Cinematic Experience</a> demo the result is something like this:</p>
<div id="attachment_45387" style="width: 1292px" class="wp-caption alignnone"><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/07/cinematic_d3d12.png" alt="Qt 5 Cinematic Experience demo app running on Direct3D 12" width="1282" height="752" class="size-full wp-image-45387" /><p class="wp-caption-text">Qt 5 Cinematic Experience demo application running on Direct3D 12</p></div>
<p>Everything in the scene is there, including the ShaderEffect items that provide a HLSL version of their shaders. Unsupported features, like particles, are gracefully ignored when running with such a backend.</p>
<p>Now what happens if the same application gets launched with <em>QT_QUICK_BACKEND=software</em>?</p>
<div id="attachment_45390" style="width: 1292px" class="wp-caption alignnone"><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/07/cinematic_sw.png" alt="Qt5 Cinematic Experience demo running on the Software backend" width="1282" height="752" class="size-full wp-image-45390" /><p class="wp-caption-text">Qt5 Cinematic Experience demo application running on the Software backend</p></div>
<p>Not bad. We lost the shader effects as well, but other than that the application is fully functional. And all this without relying on a software OpenGL rasterizer or other extra dependencies. No small feat for a framework that started out as a strictly OpenGL-based scene graph.</p>
<p><em>That&#8217;s it for part one. All this is only half of the story &#8211; stay tuned for part two where are going to take a look at the new Direct3D 12 backend and what the multi-backend Qt Quick story means for applications using advanced concepts like custom Quick items.</em></p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/">The Qt Quick Graphics Stack in Qt 5.8</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/15/the-qt-quick-graphics-stack-in-qt-5-8/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>From Visual Studio Add-In to Qt VS Tools (Beta)</title>
		<link>http://blog.qt.io/blog/2016/08/11/from-visual-studio-add-in-to-qt-vs-tools-beta/</link>
		<comments>http://blog.qt.io/blog/2016/08/11/from-visual-studio-add-in-to-qt-vs-tools-beta/#comments</comments>
		<pubDate>Thu, 11 Aug 2016 13:03:50 +0000</pubDate>
		<dc:creator><![CDATA[Karsten Heimrich]]></dc:creator>
				<category><![CDATA[Biz Circuit & Dev Loop]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Labs]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[Visual Studio]]></category>
		<category><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45508</guid>
		<description><![CDATA[<p>It has been almost three years since the latest official release of the Qt Visual Studio Add-in, but now we have something new to show you: Qt VS Tools. You can download the Beta version from Qt Downloads for testing. We are happy to be able to tell you that the package size has gone</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/11/from-visual-studio-add-in-to-qt-vs-tools-beta/">From Visual Studio Add-In to Qt VS Tools (Beta)</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>It has been almost three years since the latest official release of the <a href="http://doc.qt.io/vs-addin/index.html" target="_blank">Qt Visual Studio Add-in</a>, but now we have something new to show you: Qt VS Tools. You can download the Beta version from <a href="http://download.qt.io/development_releases/vsaddin/" target="_blank">Qt Downloads</a> for testing. We are happy to be able to tell you that the package size has gone down from 200MB to 7MB.</p>
<p>In the future, we plan to make Qt VS Tools available in the <a href="https://visualstudiogallery.msdn.microsoft.com/" target="_blank">Visual Studio Gallery</a> and directly installable from within Visual Studio 2013 and 2015. Note that we have dropped support for older Visual Studio versions. Also, before installing Qt VS Tools, make sure to uninstall the old Qt Visual Studio Add-in, because the two do not play well together.</p>
<p>When you start using Qt VS Tools, you will find the Qt <em>New Item</em> and <em>New Project</em> templates in <em>Templates</em>|<em>Visual C++</em>|<em>Qt</em>. Do not use any items from the wizards named <em>Qt5</em>, because they are artifacts of the Add-in.</p>
<p><strong>Main Changes</strong></p>
<ul>
<li>Supports Visual Studio 2013 and 2015</li>
<li>Major code refactoring, build system updates, and code cleanup</li>
<li>New wizard system based on the Visual Studio extension system</li>
<li>Out of the box support for Qt Type C++ Debugger Visualizers (natvis)</li>
</ul>
<p><strong>Known Issues</strong></p>
<ul>
<li>Missing QML support</li>
<li>Missing F1 help support</li>
<li>Missing localization support</li>
<li>Supports only installed versions of Qt</li>
</ul>
<p><strong>Get Qt VS Tools Beta</strong></p>
<p>The Qt Company has prepared convenient installers for the Qt VS Tools Beta, in the hopes that you will download, test and provide feedback so that we can deliver an awesome final product. To try out the new features you can download it from your <a href="https://account.qt.io/login" target="_blank">Qt Account</a> or from <a href="http://download.qt.io/development_releases/vsaddin/" target="_blank">download.qt.io</a>. For any issues you may find with the Beta, please submit a detailed bug report to <a href="https://bugreports.qt.io" target="_blank">bugreports.qt.io</a> (after checking for duplicates). You are also welcome to join the discussions in <a href="http://lists.qt-project.org/mailman/listinfo" target="_blank">the Qt Project mailing lists</a>, <a href="https://forum.qt.io/" target="_blank">development forums</a> and to <a href="https://wiki.qt.io/Qt_Contribution_Guidelines" target="_blank">contribute to Qt</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/11/from-visual-studio-add-in-to-qt-vs-tools-beta/">From Visual Studio Add-In to Qt VS Tools (Beta)</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/11/from-visual-studio-add-in-to-qt-vs-tools-beta/feed/</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>Qt Creator 4.1 RC1 released</title>
		<link>http://blog.qt.io/blog/2016/08/08/qt-creator-4-1-rc1-released/</link>
		<comments>http://blog.qt.io/blog/2016/08/08/qt-creator-4-1-rc1-released/#comments</comments>
		<pubDate>Mon, 08 Aug 2016 10:06:13 +0000</pubDate>
		<dc:creator><![CDATA[aportale]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[QtCreator]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45463</guid>
		<description><![CDATA[<p>We are pleased to announce the release of Qt Creator 4.1.0 RC1. Read the beta blog post for an overview of the new features coming in the 4.1 release. Since then we have been fixing bugs and polishing the new features. We believe that what we have now is very close to what we can release as</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/08/qt-creator-4-1-rc1-released/">Qt Creator 4.1 RC1 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We are pleased to announce the release of Qt Creator 4.1.0 RC1.</p>
<p>Read <a href="http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/">the beta blog post</a> for an overview of the new features coming in the 4.1 release. Since then we have been fixing bugs and polishing the new features. We believe that what we have now is very close to what we can release as the final 4.1 release soon.</p>
<p>A few visual improvements that happened since the Beta are the addition of the <a href="http://ethanschoonover.com/solarized">dark and light Solarized editor color schemes</a>, a new &#8220;Qt Creator Dark&#8221; editor color scheme as companion for the new Flat Dark theme and the polishing of the new Flat Dark and Flat Light themes.</p>
<p>See some items of the above list in action:<br />
<a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatDarkQtCreator41.png"><img style="width:300px;height:186px;float:left" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatDarkQtCreator41.png" alt="Flat Dark Theme - Qt Creator 4.1" /></a><a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatLightQtCreator41.png"><img style="width:300px;height:186px;float:clear" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/08/FlatLightQtCreator41.png" alt="Flat Light Theme - Qt Creator 4.1" /></a></p>
<p>Now is the best time to head over to our <a href="https://www.qt.io/download-open-source/#section-8">download page</a> or the <a href="https://login.qt.io/">Qt Account Portal</a>, get and install the RC and give us your feedback, preferably through our <a href="https://bugreports.qt.io/">bug tracker</a>. You also find us on IRC on #qt-creator on chat.freenode.net, and on the <a href="http://lists.qt-project.org/mailman/listinfo/qt-creator">Qt Creator mailing list</a>.</p>
<p><strong>Known issue #1</strong><br />
Unfortunately, an incompatibility between MSVC 2015 Update 3 and Clang 3.8 <a href="https://bugreports.qt.io/browse/QTCREATORBUG-16668">causes an issue with the Clang Static Analyzer plugin</a>. We will try to iron this out until the final release.</p>
<p><strong>Known issue #2</strong><br />
The changes-4.1.0 file in the source package does not contain what happened (and who additionally contributed) between 4.1.0-beta1 and this 4.1.0-rc1. Here is <a href="http://code.qt.io/cgit/qt-creator/qt-creator.git/plain/dist/changes-4.1.0.md?h=4.1">the updated changes-4.1.0.md</a></p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/08/qt-creator-4-1-rc1-released/">Qt Creator 4.1 RC1 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/08/qt-creator-4-1-rc1-released/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Coin &#8211; Continuous Integration for Qt</title>
		<link>http://blog.qt.io/blog/2016/08/08/coin-continuous-integration-for-qt/</link>
		<comments>http://blog.qt.io/blog/2016/08/08/coin-continuous-integration-for-qt/#comments</comments>
		<pubDate>Mon, 08 Aug 2016 09:08:21 +0000</pubDate>
		<dc:creator><![CDATA[Frederik Gladhorn]]></dc:creator>
				<category><![CDATA[Background]]></category>
		<category><![CDATA[integration]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[Code Review]]></category>
		<category><![CDATA[Coin]]></category>
		<category><![CDATA[Continuous Integration]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[Gerrit]]></category>
		<category><![CDATA[Testing]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=44903</guid>
		<description><![CDATA[<p>Testing is important for every software product, and Qt is no different. It is quite intriguing how much work goes into testing to ensure that a Qt release is the very best. Although I&#8217;m not directly involved with getting the release into your hand, I&#8217;ve lately learned a lot about the infrastructure (Continuous Integration or COIN) used by</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/08/coin-continuous-integration-for-qt/">Coin &#8211; Continuous Integration for Qt</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Testing is important for every software product, and Qt is no different. It is quite intriguing how much work goes into testing to ensure that a Qt release is the very best. Although I&#8217;m not directly involved with getting the release into your hand, I&#8217;ve lately learned a lot about the infrastructure (Continuous Integration or COIN) used by The Qt Company to build, test, and package. SHA-1s in this post are made up and resemble real SHA-1s only by coincidence (Coin-cidence?).</p>
<p>Qt is supported on a variety of platforms, and we need to make sure that it actually works on all of them. It&#8217;s no longer realistic to expect that everyone contributing to Qt has all supported platforms available all the time. It would also take a tremendous amount of time to check that one patch does not break any code on any of the platforms. Therefore, we chose to build a centralized infrastructure commonly known as a continuous integration system that allows us to build and test changes on all platforms.</p>
<p>Let&#8217;s assume we have a patch (or &#8220;change&#8221; in Gerrit terminology) that is approved,  and we want this change to become part of the official Qt release. After approval, Gerrit offers to &#8220;stage&#8221; each change that is targeted to a particular branch.<br />
This is where the continuous integration infrastructure becomes active. The system starts testing changes by moving them from the &#8220;staged&#8221; state to &#8220;integrating&#8221; in Gerrit. Integrating changes are being built on a variety of platforms and the automated tests of the module are run in succession. The system will finally approve or reject the tested change(s), which is again visible in Gerrit.</p>
<p>We looked at various tools that allow continuous integration to be run in a convenient and easy fashion and eventually concluded that none of the existing tools really fit our needs. I&#8217;d like to go into more details of what we noted down as requirements, but in this post, I&#8217;ll focus on just one important aspect: modularization. With the advent of Qt 5, we modularized our code base (you can find many modules on <a href="http://code.qt.io">code.qt.io</a>), but until recently, we still tested as if Qt was just one monolithic blob.</p>
<p>We improved the time for integrations by taking advantage of modularization. The idea is to build the module to be tested and its dependencies as needed. Let&#8217;s assume we want to change Qt Declarative, the module containing the Qt QML and Qt Quick libraries.  Coin keeps bare clones (see <code>--bare</code> in the <a href="https://www.git-scm.com/docs/git-clone">git docs</a>) of Qt&#8217;s Git repositories around and updates them as they change. With the copies of the repositories it can quickly find out about dependencies and provide the source code to the build machines. It checks the module for a &#8220;sync.profile&#8221; file containing the module&#8217;s dependencies (some of the details, such as the name, &#8220;sync.profile&#8221; and its syntax, will change in the future as we&#8217;re trying to make the files describing the dependencies nicer). In the case of qtdeclarative, we find qtxmlpatterns and qtbase are required to build the module. Both of these modules are then checked for the latest state of the respective branch.<br />
In the end, we have a list of modules and their SHA-1s as a tree structure. We find that we&#8217;ll need qtbase at abcdef, qtxmlpatterns at def123 and qtdeclarative at badbab.</p>
<p>As Coin runs the integrations for qtbase, it&#8217;s bound to have built and tested qtbase/abcdef before. We keep a cache of recent builds that are tested successfully, so instead of re-building qtbase, we can simply get it from the cache, skipping the build entirely. For qtxmlpatterns, we check if a build of qtxmlpatterns/def123 with the exact same qtbase/abcdef is around, but assuming qtbase recently changed, it&#8217;s unlikely, even though qtxmlpatterns might be unchanged for a while. We want to guarantee that all modules are consistently built on top of the same base artifacts, thus qtxmlpatterns/def123 gets rebuilt, if it hasn&#8217;t already been built for that SHA-1 of qtbase. The qtdeclarative SHA-1 comes from the staging branch and will be new, so it will be built.</p>
<p>Now the dependencies of the Git modules are clear. Coin looks up a list of platforms that the change is to be tested on; these are the reference platforms for the branch that we target. It then creates a lot of jobs &#8211; called work items inside the Coin code. Each work item will be a build or test of a particular module on a platform. Build items create artifacts of the result, the compiled libraries and headers of the module are then added to the cache. For our example, the first round of build items will be qtbase/abcdef on all 27 platforms that are currently supported for the 5.7 branch. Then, there is a round of 27 qtxmlpatterns/def123 builds, each of them dependent on the build of qtbase/abcdef. After that, there are 27 qtdeclarative/badbab builds based on the qtxmlpatterns/def123 builds. Once the building is complete, testing for qtdeclarative/badbab finally begins on each respective build. For the three module plus one round of testing we get (3 + 1) * 27 = 108 jobs which need to pass for a single change to make it into Qt. At this point we have all work items which need to be processed.</p>
<p>The next step is the actual running of the work items. It starts with launching the qtbase builds. In our example these are done from the start (Coin finds previous artifacts that can be used). We just finished the first 27 items in no time (stat&#8217;ing a few files on disk). We create these jobs in order to have a system that can start with an empty hard disk; it will in that case start by creating the missing artifacts by compiling qtbase.</p>
<p>When a work item is finished, items depending on it will start immediately. Coin creates virtual machines in our VSphere instance (or waits until it has the capacity to create and run them). Once we have a VM with the right OS running, we can start to launch the build on it. The build is just a list of instructions (if you look at our build logs (https://testresults.qt.io/coin), you&#8217;ll see a list of instructions: set some environment variables, go to the right directory, run configure/make/nmake/jom and others.<br />
Once all instructions have run, the result is compressed and uploaded. Some builds will finish earlier, for them we move on to the next module on the same platform while still waiting for others to finish building.</p>
<p>The qtdeclarative builds run in the same fashion, starting as soon as each dependency is done. Once the builds are done, the testing can start. It&#8217;s quite similar to the build step: Coin downloads the module which has now been built along with its dependencies. Test machines end up downloading qtbase, qtxmlpatterns and qtdeclarative, get the qtdeclarative sources (also a compressed file fresh from our git repository cache). After getting the needed artifacts, the machine runs instructions, along the lines of &#8220;make check&#8221;. Assuming all of our 108 jobs finished successfully, Coin approves the build branch in Gerrit and the qtdeclarative repository is updated.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/08/08/coin-continuous-integration-for-qt/">Coin &#8211; Continuous Integration for Qt</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/08/08/coin-continuous-integration-for-qt/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Qt WebBrowser 1.0</title>
		<link>http://blog.qt.io/blog/2016/07/18/qt-webbrowser-1-0/</link>
		<comments>http://blog.qt.io/blog/2016/07/18/qt-webbrowser-1-0/#comments</comments>
		<pubDate>Mon, 18 Jul 2016 13:43:57 +0000</pubDate>
		<dc:creator><![CDATA[Kai Koehne]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Qt WebEngine]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=44758</guid>
		<description><![CDATA[<p>We have recently open sourced Qt WebBrowser! Qt WebBrowser (codename Roadtrip) is a browser for embedded devices developed using the capabilities of Qt and Qt WebEngine. Using Chromium, it features up-to-date HTML technologies behind a minimal but slick touch-friendly user interface written in Qt Quick. All basic browser features are supported: You can search for</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/18/qt-webbrowser-1-0/">Qt WebBrowser 1.0</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We have recently open sourced Qt WebBrowser!</p>
<p><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/05/webbrowser.png" alt="Screenshot of the Qt WebBrowser." width="717" height="551" class="alignnone size-full wp-image-44767" /><br />
Qt WebBrowser (codename <em>Roadtrip</em>) is a browser for embedded devices developed using the capabilities of Qt and <a href="https://doc.qt.io/qt-5/qtwebengine-index.html">Qt WebEngine</a>. Using <a href="http://www.chromium.org/Home">Chromium</a>, it features up-to-date HTML technologies behind a minimal but slick touch-friendly user interface written in Qt Quick.</p>
<p>All basic browser features are supported: You can search for text (both in history and via <a href="http://www.google.com">Google</a>). You can bookmark pages, navigate in the page history, and open multiple pages concurrently. Depending on the codecs available, full-screen video and audio playback should also just work. You can also enable a private browser mode that leaves no traces after the browser is closed.</p>
<p>So far the browser has been only shipped as part of the <a href="https://www.qt.io/qt-for-device-creation/">Qt for Device Creation</a> demo, but we&#8217;re now releasing it also separately under GPLv3 and Commercial licenses. The browser serves as a testbed and demo for Qt and Qt WebEngine, but we see that it can also be used in your device solutions. So please talk to us if you have any kind of feedback, particularly feature requests! The preferred place is <a href="https://bugreports.qt.io/browse/QTWB">JIRA</a>, but you can also just drop us a mail.</p>
<p>The browser is optimized for embedded touch displays (running Linux), but you can play with it on the desktop platforms, too! Just make sure that you have Qt WebEngine, Qt Quick, and Qt VirtualKeyboard installed (version 5.7 or newer). For optimal performance on embedded devices you should plan for hardware-accelerated OpenGL, and around 1 GiByte of memory for the whole system. Anyhow, depending on your system configuration and the pages to be supported there is room for optimization.</p>
<p>More details about the browser&#8217;s user interface and capabilities can be found in the <a href="http://doc.qt.io/QtWebBrowser/">documentation</a>. The source code is hosted on <a href="http://code.qt.io/cgit/qt-apps/qtwebbrowser.git/">code.qt.io</a>. </p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/18/qt-webbrowser-1-0/">Qt WebBrowser 1.0</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/18/qt-webbrowser-1-0/feed/</wfw:commentRss>
		<slash:comments>21</slash:comments>
		</item>
		<item>
		<title>A Quick Preview of What You’ll See at Qt World Summit 2016</title>
		<link>http://blog.qt.io/blog/2016/07/15/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016/</link>
		<comments>http://blog.qt.io/blog/2016/07/15/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016/#comments</comments>
		<pubDate>Fri, 15 Jul 2016 14:57:45 +0000</pubDate>
		<dc:creator><![CDATA[Iris Yamashita]]></dc:creator>
				<category><![CDATA[Biz Circuit]]></category>
		<category><![CDATA[Events]]></category>
		<category><![CDATA[Qt Developer Days]]></category>
		<category><![CDATA[Qt in use]]></category>
		<category><![CDATA[Qt World Summit]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45400</guid>
		<description><![CDATA[<p>This year at #QtWS16, The Qt Company and our ecosystem will deliver several inspirational keynotes, insightful breakouts, take a look into the future of IoT and how Qt will be the enabler, putting you and your project ahead of the curve. Here is a sneak peek at some of the things you will see in</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/15/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016/">A Quick Preview of What You’ll See at Qt World Summit 2016</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>This year at #QtWS16, The Qt Company and our ecosystem will deliver several inspirational keynotes, insightful breakouts, take a look into the future of IoT and how Qt will be the enabler, putting you and your project ahead of the curve.</p>
<p>Here is a sneak peek at some of the things you will see in San Francisco at the Qt World Summit:</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/EWm7VSsAMtWIHw" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/Qt_/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016" title="A Quick Preview of What You&#x27;ll See at Qt World Summit 2016" target="_blank">A Quick Preview of What You&#x27;ll See at Qt World Summit 2016</a> </strong> from <strong><a href="//www.slideshare.net/Qt_" target="_blank">Qt</a></strong> </div>
<p>Seating is limited, so <strong><a href="http://www.qtworldsummit.com/#tile_registration_anchor">register today</a></strong> for the early bird offer!</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/15/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016/">A Quick Preview of What You’ll See at Qt World Summit 2016</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/15/a-quick-preview-of-what-youll-see-at-qt-world-summit-2016/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>QtCon schedule and registration</title>
		<link>http://blog.qt.io/blog/2016/07/14/qtcon-schedule-and-registration/</link>
		<pubDate>Thu, 14 Jul 2016 08:00:54 +0000</pubDate>
		<dc:creator><![CDATA[Tero Kojo]]></dc:creator>
				<category><![CDATA[Contributors]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Events]]></category>
		<category><![CDATA[conference]]></category>
		<category><![CDATA[Qt Contributors' Summit]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45293</guid>
		<description><![CDATA[<p>A small update on QtCon. The program for QtCon is now up on the QtCon site, and we have a huge number of interesting topics to discuss and learn about. As we have several different communities coming together the topics are various and everyone will find interesting content for every part of the event. If you</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/14/qtcon-schedule-and-registration/">QtCon schedule and registration</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-45004" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/QtCon16_Logo.png" alt="QtCon16_Logo" width="800" height="500" /></p>
<p>A small update on <a href="http://QtCon.org">QtCon</a>.</p>
<p>The <a href="https://conf.qtcon.org/en/qtcon/public/schedule">program for QtCon</a> is now up on the QtCon site, and we have a huge number of interesting topics to discuss and learn about. As we have several different communities coming together the topics are various and everyone will find interesting content for every part of the event.</p>
<p>If you are a contributor to the Qt project and are coming to QtCon, please <a href="https://conf.qtcon.org/en/session/new?conference_acronym=qtcon">remember to register </a>to the event. And remember to book your travel and hotel early, Berlin is hosting IFA and other events at the same time, and this means a lot of visitors to the city.</p>
<p>See you in Berlin!</p>
<p>P.S. If your company would like to be part of the event, please take a look at <a href="https://qtcon.org/sites/qtcon.org/files/sponsorship_brochure.pdf">sponsorship brochure</a>!</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/14/qtcon-schedule-and-registration/">QtCon schedule and registration</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Qt Creator 4.0.3 released</title>
		<link>http://blog.qt.io/blog/2016/07/07/qt-creator-4-0-3-released/</link>
		<comments>http://blog.qt.io/blog/2016/07/07/qt-creator-4-0-3-released/#comments</comments>
		<pubDate>Thu, 07 Jul 2016 11:11:24 +0000</pubDate>
		<dc:creator><![CDATA[Eike Ziller]]></dc:creator>
				<category><![CDATA[Biz Circuit & Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[QtCreator]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45313</guid>
		<description><![CDATA[<p>We are happy to announce the release of Qt Creator 4.0.3. Improvements In this release we removed a bug which disabled the run button on macOS 10.8 and FreeBSD, made the Clang code model stop replacing the dot in floating point literals by an arrow, and fixed an issue with opening CMake projects from symbolically</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/07/qt-creator-4-0-3-released/">Qt Creator 4.0.3 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We are happy to announce the release of Qt Creator 4.0.3.</p>
<p><strong>Improvements</strong></p>
<p>In this release we removed a bug which disabled the run button on macOS 10.8 and FreeBSD, made the Clang code model stop replacing the dot in floating point literals by an arrow, and fixed an issue with opening CMake projects from symbolically linked directories.</p>
<p>Please find more information in our <a href="https://code.qt.io/cgit/qt-creator/qt-creator.git/tree/dist/changes-4.0.3.md?h=4.0">change log</a>.</p>
<p><strong>Get Qt Creator 4.0.3</strong></p>
<p>The opensource version is available on the <a href="https://www.qt.io/download-open-source/#section-9">Qt download page</a>, and you find commercially licensed packages on the <a href="https://login.qt.io/">Qt Account Portal</a>. Qt Creator 4.0.3 is also available through an update in the online installer. Please post issues in our <a href="https://bugreports.qt.io/">bug tracker</a>. You can also find us on IRC on #qt-creator on chat.freenode.net, and on the <a href="http://lists.qt-project.org/mailman/listinfo/qt-creator">Qt Creator mailing list</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/07/qt-creator-4-0-3-released/">Qt Creator 4.0.3 released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/07/qt-creator-4-0-3-released/feed/</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
		<item>
		<title>Qt Creator 4.1.0 Beta released</title>
		<link>http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/</link>
		<comments>http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/#comments</comments>
		<pubDate>Wed, 06 Jul 2016 09:11:22 +0000</pubDate>
		<dc:creator><![CDATA[Eike Ziller]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[QtCreator]]></category>
		<category><![CDATA[Releases]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45316</guid>
		<description><![CDATA[<p>We are happy to announce the release of Qt Creator 4.1.0 Beta1. What could be said to be the most visible new feature, if you turn it on, is that we added the Flat Dark and Flat Light themes. These are the continuation of the effort to implement the concept design by Diana, and complement the Flat</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/">Qt Creator 4.1.0 Beta released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We are happy to announce the release of Qt Creator 4.1.0 Beta1.</p>
<p><img class="size-full wp-image-45317 aligncenter" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/07/dark-flat.png" alt="dark-flat" width="558" height="303" /> <img class="size-medium wp-image-45318 aligncenter" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/07/light-flat.png" alt="light-flat" width="300" height="163" /></p>
<p>What could be said to be the most visible new feature, if you turn it on, is that we added the <em>Flat Dark</em> and <em>Flat Light</em> themes. These are the continuation of the effort to implement the <a href="https://blog.qt.io/blog/2015/02/09/qt-creator-flat-style-ui-design-new-light-theme/">concept</a> design by Diana, and complement the <em>Flat</em> theme, which is a light theme with dark tool bars that was introduced with Qt Creator 4.0. You can change the theme in the <em>Environment &gt; Interface &gt; Theme</em> settings and try them.</p>
<p><strong>Editing</strong></p>
<p>A feature that should be mostly invisible, is that Qt Creator now automatically releases resources of documents that are not modified and have not been in your focus for a longer time (meaning: that moved a certain way down in your document history). We actually have a related feature since a long time already: When we restore a session, only the visible documents are loaded into editors, even though the others appear in the <em>Open Documents</em> pane and other document choosers. Opening them will also restore editor state, like scroll and cursor positions. Documents can now fall back into that state even after they were loaded. This avoids Qt Creator accumulating system resources, without the need for the user to manually close documents. You can configure this behavior in the <em>Environment &gt; System</em> settings.</p>
<p>The text editors have received another long wished for improvement. You can now separately define if brackets or quotes are automatically added while typing. There are also separate settings if typing the character manually will then replace the automatically inserted character, and if deleting the originally typed character will remove the automatically inserted counterpart. Additionally the latter two features should behave more natural, because they are only active as long as the text cursor does not move away from the location where the counterpart character was added. Find the new options in the <em>Text Editor &gt; Completion</em> settings.</p>
<p><strong>C++</strong></p>
<p>We have updated our binary packages to use Clang 3.8, which fixes many issues with parsing MSVC 2015 standard headers with the Clang code model. We also separated the color scheme setting for function declarations and usages, and added a new one for global variables.</p>
<p><strong>Qt Quick</strong></p>
<p>If you are working with Qt Quick, you might be happy to hear that we greatly improved the overall performance of Qt Quick designer, by optimizing the process of updating the QML document when changes happen. You can now also choose the Qt Quick Controls 2 style that your items should be rendered in.</p>
<p>We also improved the the performance of the QML Profiler in the presence of many events.</p>
<p><strong>Other Additions and Improvements</strong></p>
<p>We further improved the CMake project support that was overhauled in Qt Creator 4.0. You now have the option to turn off automatic running of CMake per configured tool (<em>Build &amp; Run &gt; CMake</em>). It is now also no longer run automatically if Qt Creator is not the active application. We also improved the parsing of CMake errors, and fixed an issue with the ordering of include paths that are passed to the code model.</p>
<p>Because of the efforts of Filippo Cucchetto we now also have experimental support for the <a href="http://nim-lang.org">Nim programming language</a>. (Turn the plugin on in <em>Help &gt; About Plugins</em>, or <em>Qt Creator &gt; About Plugins</em> on macOS.) It includes syntax highlighting, indentation, coding style settings, and simple project management supporting building, running and debugging applications. Many thanks to him for this contribution!</p>
<p>There have been many other changes. Please refer to our <a href="https://code.qt.io/cgit/qt-creator/qt-creator.git/tree/dist/changes-4.1.0.md?h=4.1">change log</a> for a more complete overview.</p>
<p><strong>Get Qt Creator 4.1.0 Beta1</strong></p>
<p>The opensource version is available on the <a href="https://www.qt.io/download-open-source/#section-11">Qt download page</a>, and you find commercially licensed packages on the <a href="https://login.qt.io/">Qt Account Portal</a>. Please post issues in our <a href="https://bugreports.qt.io/">bug tracker</a>. You can also find us on IRC on #qt-creator on chat.freenode.net, and on the <a href="http://lists.qt-project.org/mailman/listinfo/qt-creator">Qt Creator mailing list</a>.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/">Qt Creator 4.1.0 Beta released</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/06/qt-creator-4-1-0-beta-released/feed/</wfw:commentRss>
		<slash:comments>26</slash:comments>
		</item>
		<item>
		<title>Status Update on Qt for WinRT / UWP</title>
		<link>http://blog.qt.io/blog/2016/07/01/status-update-on-qt-for-winrt-uwp/</link>
		<comments>http://blog.qt.io/blog/2016/07/01/status-update-on-qt-for-winrt-uwp/#comments</comments>
		<pubDate>Fri, 01 Jul 2016 11:44:33 +0000</pubDate>
		<dc:creator><![CDATA[Maurice Kalinowski]]></dc:creator>
				<category><![CDATA[cross-platform]]></category>
		<category><![CDATA[desktop]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Mobile]]></category>
		<category><![CDATA[Qt Bluetooth]]></category>
		<category><![CDATA[Qt Quick 2]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[WinRT]]></category>
		<category><![CDATA[bluetooth]]></category>
		<category><![CDATA[btle]]></category>
		<category><![CDATA[embedded]]></category>
		<category><![CDATA[hololens]]></category>
		<category><![CDATA[iot]]></category>
		<category><![CDATA[purchasing]]></category>
		<category><![CDATA[store]]></category>
		<category><![CDATA[uwp]]></category>
		<category><![CDATA[window]]></category>
		<category><![CDATA[windows rt]]></category>
		<category><![CDATA[windows store]]></category>
		<category><![CDATA[winrt]]></category>
		<category><![CDATA[xbox]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45297</guid>
		<description><![CDATA[<p>It has been a long while since we were writing on this blog about the WinRT port of Qt. Hence, this is going to be a longer article on what we achieved in the meanwhile, are currently working on, and what we will provide in future releases. Supported Platforms WinRT as a platform API set</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/01/status-update-on-qt-for-winrt-uwp/">Status Update on Qt for WinRT / UWP</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>It has been a long while since we were writing on this blog about the WinRT port of Qt.</p>
<p>Hence, this is going to be a longer article on what we achieved in the meanwhile, are currently working on, and what we will provide in future releases.</p>
<p><span id="more-45297"></span></p>
<h2>Supported Platforms</h2>
<p>WinRT as a platform API set has been continuously improved and new features have been added which Qt can make use of, allowing us to provide more of Qt API to developers. One example is drag and drop support.</p>
<p>Many of you might have heard of the terminology <em>Universal Windows Platform</em>, or <em>UWP</em>. This describes a rather high level abstraction, in the end it boils down to the WinRT API being used and extended. Hence, the Qt for WinRT version currently supports the following platforms:</p>
<ul>
<li>Windows 8.1</li>
<li>Windows Phone 8.1</li>
<li>Windows 10</li>
<li>Windows 10 Mobile</li>
<li>Windows 10 IoT (Core/Professional) *</li>
<li>Microsoft Hololens *</li>
<li>XBOX One *</li>
</ul>
<p>* I will talk about those platforms later. </p>
<h2>Previous / Current Qt releases</h2>
<p>Qt 5.6 marked an important release for the port as we needed to exchange a lot of the internals to be able to integrate custom Xaml content into a Qt application. One example of achieving this was to enable support for <a href="http://doc.qt.io/qt-5/qtwebview-index.html" target="_blank">Qt WebView</a>, which integrates <em>Microsoft Edge</em> into a Qt application. In case you have your own custom Xaml content you need integrated, I recommend to take a look at the <a href="http://code.qt.io/cgit/qt/qtwebview.git/tree/src/webview/qwebview_winrt.cpp" target="_blank">source code</a>. You will recognize that there are some caveats on what you need to do from which thread.</p>
<p>Furthermore, we have been working a lot on camera support in Qt Multimedia, added synthesis of Pen events to use it e.g. on Surface devices and general bug fixes and stability improvements. At Qt 5.6 is a LTS release, we will also continue to update this branch and provide fixes for crucial bug reports.</p>
<p>In addition Qt 5.6.1 includes two workflow changes I would like to highlight:</p>
<ol>
<li>Creating a Visual Studio project with qmake does not require to add <code>CONFIG+=windeployqt</code> anymore. We have recognized that almost all users use this option instead of manually deploying or collection libraries and plugins for the package. Hence, we enabled it by default.</li>
<li>We added a <em>default</em> capability feature for the template manifest. As an example, if you use <code>QT+=multimedia</code> in your project, this will automatically add <code>webcam</code> and <code>microphone</code> capabilities to your project. The benefit is that during development you will have all features available without considering which capability matches which feature. However, you have to make sure to remove non required capabilities during the publishing process. For instance, the <code>internetClientServer</code> capability is enabled by default allowing an app to act as a server. In most cases you will not need this capability for your app.</li>
</ol>
<p>Moving on to Qt 5.7 there are two features to emphasize about Qt on WinRT. </p>
<p>First of all, we added a low latency audio plugin, utilizing <em>WASAPI</em>. This was due to huge request by users. Additionally, this plugin can also be used for classic development, meaning regular desktop applications. The advantage against the windowsaudio backend using <em>WaveOut</em> is clearly found in latency. According to Microsoft the guaranteed latency has been greatly reduced in <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/mt298187(v=vs.85).aspx" target="_blank">Windows 10</a> and later releases and you will be able to utilize it with Qt plugin. The downside is that WASAPI synchronizes the sample-rate to the audio driver without providing any conversion capabilities for a developer. Hence, you are responsible for converting between sample rates in case those do not match. The plugin is not enabled by default for the desktop platforms, but you can compile, test and use it from our <a href="http://code.qt.io/cgit/qt/qtmultimedia.git/tree/src/plugins/wasapi" target="_blank">git repository</a> or source package.</p>
<p>One additional item we have added with experimental support is to use <em>JIT</em> in the QmlEngine on x86 and x64 architectures. You might remember that initially this was not supported for the Windows Store. However, this seems to have changed even though there is no public statement or documentation about this yet. Using JIT can speed up your application significantly depending on your use cases, for instance some test functions in the engine auto tests executed faster by a factor of 100+. To enable this in your WinRT app, all you have to do is add the <code>codeGeneration</code> capability in your manifest, recompile your appx and start testing. From our experiments it is possible to push and publish an app in the Windows Store, however it is not guaranteed that this feature will stay. We have been told that this capability is mostly used for .NET native, but also (or because of it) allows VirtualAllocFromApp/VirtualFree to succeed. </p>
<h2>Future Qt releases</h2>
<p>We would like to see JIT also available on ARM to use it for on mobile platforms and also Windows 10 IoT Core, where speed improvements are even more crucial. Unfortunately, the current public API does not provide us everything we need, for instance flushing cache lines is not supported. Once those items are public, we can continue on topic and we will keep you updated. You can also watch the <a href="https://codereview.qt-project.org/#/c/163282/">WIP</a> in the meanwhile.</p>
<p>Qt 5.8 is already shaping up with feature freeze approaching in less than a month. Hence I would like to summarize a couple of items we have been working on for this release.</p>
<p>Again, we validated the reports for <a href="https://bugreports.qt.io/browse/QTBUG-37779?filter=16661" target="_blank">WinRT</a> with the highest votes to get an understanding what is most important for users and customers. From that list Qt 5.8 will add support for <a href="http://doc.qt.io/qt-5/qtbluetooth-index.html" target="_blank">BTLE</a> and <a href="http://doc.qt.io/qt-5/qtpurchasing-index.html" target="_blank">Qt Purchasing</a> to publish applications in the <em>Windows Store</em> using In App Products.</p>
<p><a href="http://code.qt.io/cgit/qt/qtspeech.git/" target="_blank">Qt Speech</a> will be part of Qt 5.8 as a <em>tech preview</em> module, including support for WinRT using the <em>Speech Synthesizer API</em>.</p>
<p>Lastly, you might have read about our efforts to decouple the hard dependency of Qt Quick on OpenGL and providing additional backends. <a href="http://blog.qt.io/blog/author/laagocs/" target="_blank">Laszlo</a> has been doing an incredible job adding a D3D12 backend, which will also work for WinRT. For more information, you can read the <a href="http://doc-snapshots.qt.io/qt5-dev/qtquick-visualcanvas-adaptations-d3d12.html" target="_blank">snapshot documentation</a>.</p>
<h3>Platform Ammendment</h3>
<h3>Windows 10 IoT Core / Professional</h3>
<p>Microsoft has introduced a new line of embedded operating systems called <a href="https://developer.microsoft.com/en-us/windows/iot" target="_blank">Windows 10 IoT</a>. This is based on the Windows 10 architecture and comes with a limited feature set tailored towards embedded use-cases. For instance, no window manager / compositor is supported, only one application is supposed to show full screen. There are images available for various embedded devices, like the Raspberry Pi or the Dragonboard 410c, but the user experience might vary heavily depending on the snapshot of the image and its driver status. There is no graphics acceleration for the Raspberry Pi, causing Qt for WinRT to use the WARP software renderer with fairly bad fps rendering and a broken user experience. The Dragonboard has graphics acceleration and visually it is way more appealing, but you might experience troubles in other areas.</p>
<h3>Microsoft Hololens</h3>
<p>Unfortunately, we did not have the chance yet to experiment with the Hololens physically. But there are emulator images available and according from our experience using those, Qt does run on the Hololens. When publishing your app to the Store you can select the Hololens as an additional target to deploy to. In case you have experience with Qt on this device, feel free to get in touch with us.</p>
<h3>XBOX One</h3>
<p>The XBOX One will be opened towards 3<sup><span style="font-size: small">rd</span></sup> party developers in one of its upcoming releases. Developers are already capable of setting the console into development mode and start coding on it. Using Qt for WinRT you will be able to develop Qt applications for the XBOX One and, once enabled, push those to the Store. From our experience input handling is not working to our fullest satisfaction, but we will work on this in the nearer future.</p>
<p>&nbsp;</p>
<p>Moving further into the future there a lot of items we would like to do for the WinRT port, but we also need your feedback on what is important for developers. Hence I would like to ask every developer on this platform to vote and/or create items on our <a href="https://bugreports.qt.io/" target="_blank">bugtracker</a>. For easier tracking, all WinRT related items have <code>QtPorts:WinRT</code> as component.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/01/status-update-on-qt-for-winrt-uwp/">Status Update on Qt for WinRT / UWP</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/01/status-update-on-qt-for-winrt-uwp/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Aligning with the Yocto Project</title>
		<link>http://blog.qt.io/blog/2016/07/01/aligning-with-the-yocto-project/</link>
		<comments>http://blog.qt.io/blog/2016/07/01/aligning-with-the-yocto-project/#comments</comments>
		<pubDate>Fri, 01 Jul 2016 11:11:16 +0000</pubDate>
		<dc:creator><![CDATA[Tuukka Turunen]]></dc:creator>
				<category><![CDATA[Community]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Qt developers]]></category>
		<category><![CDATA[yocto project]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45282</guid>
		<description><![CDATA[<p>We have leveraged Yocto internally for many years to build our reference &#8220;Boot to Qt&#8221; embedded Linux stack of Qt for Device Creation. During 2015 we started to align our work with upstream Yocto Project, including contributions to improve the meta-qt5 layer. With Qt 5.7 we have also opened our meta-boot2qt layer in order to make it easier</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/01/aligning-with-the-yocto-project/">Aligning with the Yocto Project</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><em><strong>We have leveraged Yocto internally for many years to build our reference &#8220;Boot to Qt&#8221; embedded Linux stack of Qt for Device Creation. During 2015 we started to align our work with upstream Yocto Project, including contributions to improve the meta-qt5 layer. With Qt 5.7 we have also opened our meta-boot2qt layer in order to make it easier to co-operate with semiconductor vendors, open-source community as well as the customers using Qt for Device Creation.</strong></em></p>
<p><a href="https://www.yoctoproject.org/about" target="_blank">The Yocto Project</a> is an open source collaboration project that provides templates, tools and methods to help create custom Linux-based systems for embedded products regardless of the hardware architecture. The Yocto project is derived from the OpenEmbedded project and it shares core part of the metadata, recipes and tools with OpenEmbedded. The reference distribution of the Yocto Project is called Poky. It contains the OpenEmbedded Build System (BitBake and OpenEmbedded Core) as well as a set of metadata to get you started building your own distro. In addition there are available lot of metalayers which variate the core layers and add additional components, configurations and rule scripts for creating vendor specific distributions. Goal of the Yocto Project is to de-mystify the art of making embedded Linux distributions, helping both the technology providers to co-operate more efficiently and the device makers to better manage the exact distribution they have in their device.</p>
<p>The Qt Company is now proudly also an <a href="https://www.yoctoproject.org/organization/qt-company" target="_blank">official Yocto Project Participant</a>:</p>
<p><a href="https://www.yoctoproject.org/organization/qt-company"><img class="aligncenter wp-image-45281" src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/07/Yocto_Project_Badge_Participant_Web_RGB.png" alt="Yocto_Project_Badge_Participant_Web_RGB" width="350" height="300" /></a></p>
<p>For the past year we have been actively working together with <a href="https://www.yoctoproject.org/product/meta-qt5" target="_blank">meta-qt5</a>, the Yocto compatible meta layer dedicated for building Qt modules for your embedded devices. The layer was also recently updated to provide recipes for the previously commercial modules (Qt Virtual Keyboard, Qt Charts and Qt Data Visualization), which are now open source in Qt 5.7. We have offered Yocto based reference images since Qt 5.1, and we released our first reference images based on meta-qt5 with Qt for Device Creation 5.6.0 and continue the work with the latest 5.7.0 release. The 5.7.0 release is based on Yocto 2.0 (Jethro), and idea is to update the Yocto release version for each minor Qt version, when suitable stable release is available. In order to provide support for the latest version of Qt, we have <a href="http://code.qt.io/cgit/yocto/meta-qt5.git/" target="_blank">a mirror of meta-qt5 in the Qt Project repository</a>. We do work upstream as much as possible, and are also welcome to host the upstream meta-qt5 repository under the Qt Project (currently it is in github).</p>
<p>Since the meta-qt5 layer provides only recipes for building the Qt modules, we have created a separate Boot to Qt meta layer, <a href="http://code.qt.io/cgit/yocto/meta-boot2qt.git/" target="_blank">meta-boot2qt</a>, which takes care of building the images and toolchains for the reference devices. The meta-boot2qt layer integrates all the required BSP meta layers, so there is no manual configurations necessary when starting Yocto build for one of the Qt reference devices. The layer was previously available only for our commercial customers, but with Qt 5.7 we have open sourced it as well. To get started with meta-boot2qt, clone the repository for <a href="http://code.qt.io/cgit/yocto/meta-boot2qt.git/" target="_blank">meta-boot2qt</a> and follow <a href="http://doc.qt.io/QtForDeviceCreation/qtee-custom-embedded-linux-image.html" target="_blank">the instructions of building your own embedded Linux image</a> in the Qt documentation.</p>
<p>Currently Qt for Device Creation and the meta-boot2qt layer contains support for many commonly available development boards and production hardware:</p>
<ul>
<li>Raspberry Pi (raspberrypi)</li>
<li>Raspberry Pi 2 (raspberrypi2)</li>
<li>Raspberry Pi 3 (raspberrypi3)</li>
<li>BeagleBone Black (beaglebone)</li>
<li>Boundary Devices (i.MX6 Boards nitrogen6x)</li>
<li>Freescale SABRE SD (i.MX6Quad imx6qsabresd)</li>
<li>Freescale SABRE SD (i.MX6Dual imx6dlsabresd)</li>
<li>Toradex Apalis iMX6 (apalis-imx6)</li>
<li>Toradex Colibri iMX6 (colibri-imx6)</li>
<li>Toradex Colibri VF (colibri-vf)</li>
<li>Kontron SMARC-sAMX6i (smarc-smax6i)</li>
<li>Intel NUC (intel-corei7-64)</li>
<li>NVIDIA DRIVE CX (tegra-t18x)</li>
<li>Qt for Device Creation Emulator (emulator)</li>
</ul>
<p>Qt works with much wider variety of hardware than we have as reference devices, so if your hardware is not listed it does not mean it can&#8217;t be used. We are offering convinient pre-built binaries for the reference devices as part of the Qt for Device Creation installer. With the Yocto tooling it is easy to take these as a starting point and tune the image according to your specific needs. If you do not yet have Qt for Device Creation, please <a href="https://www.qt.io/request-eval-for-devices-step-2/" target="_blank">ask and we&#8217;ll provide you with a free evaluation</a>. If you need help with Yocto or other things, please <a href="https://www.qt.io/contact-us/" target="_blank">contact us</a> or one of the <a href="https://www.qt.io/partners/" target="_blank">official Qt Partners</a> to get a boost into your embedded development.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/07/01/aligning-with-the-yocto-project/">Aligning with the Yocto Project</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/07/01/aligning-with-the-yocto-project/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Intents with Qt for Android, part 1</title>
		<link>http://blog.qt.io/blog/2016/06/30/intents-with-qt-for-android-part-1/</link>
		<comments>http://blog.qt.io/blog/2016/06/30/intents-with-qt-for-android-part-1/#comments</comments>
		<pubDate>Thu, 30 Jun 2016 08:32:10 +0000</pubDate>
		<dc:creator><![CDATA[Eskil Abrahamsen Blomfeldt]]></dc:creator>
				<category><![CDATA[Android]]></category>
		<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Qt]]></category>
		<category><![CDATA[Qt in use]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=44681</guid>
		<description><![CDATA[<p>The &#8220;intent&#8221; is the main facility for interprocess communication on Android. Basically, an intent is an object that is processed by the operating system and then passed to one or more of the installed applications based on its contents. It could for instance be a request to show a video, in which case the intent</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/06/30/intents-with-qt-for-android-part-1/">Intents with Qt for Android, part 1</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>The &#8220;<a href="https://developer.android.com/guide/components/intents-filters.html">intent</a>&#8221; is the main facility for interprocess communication on Android. Basically, an intent is an object that is processed by the operating system and then passed to one or more of the installed applications based on its contents. It could for instance be a request to show a video, in which case the intent type would be <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a> and the mime type would be set accordingly. Applications can subscribe to certain intents by setting an intent filter in their manifest files. The first time a type of intent is seen, the user of the device will be presented with a selection of applications known to subscribe to that type of intent. If they choose, they can set a default at this point, or select to be asked for every instance.</p>
<p>This is the first of a few articles showing how to use intents with Qt for Android.</p>
<p><span id="more-44681"></span></p>
<p>The mechanism itself is quite general. What is described above is one use case, but intents are also used for other things: One such thing is launching services inside the application. This is usually formatted as an &#8220;explicit intent&#8221;, meaning that the fully qualified name of the service to start is provided, so it cannot be intercepted by any other applications. </p>
<p>Another way intents are used is for broadcasts, for instance when the time zone of the device changes. While the action to view a video described above would only launch the one specific application selected by the user, a broadcast will rather be passed to any application which subscribes to it.</p>
<p>This blog will focus on Android, but a similar mechanism called <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/index.html">app extensions</a> was introduced in iOS 8.</p>
<p>In this first article about intents on Android, I will focus on the simplest use case: Creating an implicit intent from Qt to start an unspecified application on the target device. As an example, I have made a simple application which presents food recipes. Each recipe has an estimated time for completion. By clicking a button, you can set a timer using the preferred countdown application on the device. (For a more useful use case, one might imagine a button setting a timer for each of the steps in the recipe&#8217;s directions, but for this simple example we will only have a single timer per recipe.) </p>
<p>I won&#8217;t go into detail about how the application itself is written, but the code can be found <a href="https://github.com/eskilblomfeldt/recipeexample">here</a>. No effort has been made to make the UI look nice, so please disregard that. The application is backed by an SQLite database (which is filled with some dummy content the first time the application is started) and has a very simple UI written in Qt Quick Controls 2, allowing the user to select a recipe from a list, see its details on a separate page and click a button on the recipe to set a timer in the system.</p>
<p><a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/recipe.png"><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/recipesmall.png" alt="Picture of recipe" width="400" height="711" class="aligncenter size-full wp-image-45270" /></a></p>
<p>The part we will focus on is the code that actually requests the timer from the system. This is in the <code>recipe.cpp</code> file, in the function <code>Recipe::createTimer()</code>. For our example we will be using the <a href="https://developer.android.com/reference/android/provider/AlarmClock.html#ACTION_SET_TIMER">AlarmClock.ACTION_SET_TIMER</a> intent type. </p>
<p>We will use the JNI convenience APIs in <a href="http://doc.qt.io/qt-5/qtandroidextras-index.html">the Qt Android Extras module</a> for this. I will go through this code step by step. </p>
<pre class="brush:cpp">
    QAndroidJniObject ACTION_SET_TIMER = QAndroidJniObject::getStaticObjectField("android/provider/AlarmClock",
                                                                                          "ACTION_SET_TIMER");
    QAndroidJniObject intent("android/content/Intent",
                             "(Ljava/lang/String;)V",
                             ACTION_SET_TIMER.object());
</pre>
<p>The first step is to create the intent. We retrieve the identifier of the ACTION_SET_TIMER intent. This is a static member of the android.provider.AlarmClock class and is of type String. Note the use of slashes in place of dots in the package name of the class. This corresponds to the bytecode representation of package names (for historical reasons according to <a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.2.1">the specification</a>) and is therefore also used in signatures in JNI.</p>
<p>Since we are only using functions from Qt Android Extras and no explicit calls using the JNI APIs, we don&#8217;t have to worry about reference management. This is one primary convenience of the APIs.</p>
<p>The next step is to actually create the intent object. We do this by constructing a QAndroidJniObject, passing in the JNI-mangled signature of <a href="https://developer.android.com/reference/android/content/Intent.html#Intent(java.lang.String)">the Java constructor we want to call</a> and we pass in the ID of the action we just got from the AlarmClock class.</p>
<pre class="brush:cpp">
    QAndroidJniObject EXTRA_MESSAGE = QAndroidJniObject::getStaticObjectField("android/provider/AlarmClock",
                                                                                       "EXTRA_MESSAGE");
    QAndroidJniObject messageObject = QAndroidJniObject::fromString(message);
    intent.callObjectMethod("putExtra",
                            "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
                            EXTRA_MESSAGE.object(),
                            messageObject.object());

    QAndroidJniObject EXTRA_LENGTH = QAndroidJniObject::getStaticObjectField("android/provider/AlarmClock",
                                                                                      "EXTRA_LENGTH");
    intent.callObjectMethod("putExtra",
                            "(Ljava/lang/String;I)Landroid/content/Intent;",
                            EXTRA_LENGTH.object(),
                            jint(m_time * 60));

    QAndroidJniObject EXTRA_SKIP_UI = QAndroidJniObject::getStaticObjectField("android/provider/AlarmClock",
                                                                                      "EXTRA_SKIP_UI");
    intent.callObjectMethod("putExtra",
                            "(Ljava/lang/String;Z)Landroid/content/Intent;",
                            EXTRA_SKIP_UI.object(),
                            jboolean(true));
</pre>
<p>Next up, we set up some arguments we want to send to the activity handling the action. We pass in a description of the timer and the number of seconds to set it for. </p>
<pre class="brush:cpp">
    QAndroidJniObject activity = QtAndroid::androidActivity();
    QAndroidJniObject packageManager = activity.callObjectMethod("getPackageManager",
                                                                 "()Landroid/content/pm/PackageManager;");
    QAndroidJniObject componentName = intent.callObjectMethod("resolveActivity",
                                                              "(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;",
                                                              packageManager.object());
</pre>
<p>Then we have to resolve the activity. This will tell the system to check if there is an application available to handle the ACTION_SET_TIMER action. We first get a reference to the current activity (our current <a href="https://developer.android.com/reference/android/content/Context.html">context</a>) in order to get the appropriate <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html">package manager</a>. Then we call resolveActivity() on the intent and pass in the package manager.</p>
<pre class="brush:cpp">
    if (componentName.isValid()) {
        QtAndroid::startActivity(intent, 0);
    } else {
        qWarning() &lt;&lt; &quot;Unable to resolve activity&quot;;
    }
</pre>
<p>If the returned <a href="https://developer.android.com/reference/android/content/ComponentName.html">component name</a> is non-null, we start the activity using the convenience function in Qt Android Extras. We will look at more features of this function in a later blog. If no appropriate activity is found, then this code only outputs a warning to the console. A proper application might complain in the actual user interface, but note that the operating system has also alerted the user of the problem at this point.</p>
<p><a href="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/alarm.png"><img src="https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/alarmsmall.png" alt="Screenshot of alarm that has been set" width="400" height="711" class="aligncenter size-full wp-image-45269" /></a></p>
<p>That&#8217;s it for this first introduction to using intents in Qt for Android. Look out for more complex examples in the future.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/06/30/intents-with-qt-for-android-part-1/">Intents with Qt for Android, part 1</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.qt.io/blog/2016/06/30/intents-with-qt-for-android-part-1/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>Over-the-Air Updates, Part 2: Device Integration, API and Creating Updates</title>
		<link>http://blog.qt.io/blog/2016/06/28/over-the-air-updates-part-2-device-integration-api-and-creating-updates/</link>
		<pubDate>Tue, 28 Jun 2016 12:00:34 +0000</pubDate>
		<dc:creator><![CDATA[Gatis Paeglis]]></dc:creator>
				<category><![CDATA[Dev Loop]]></category>
		<category><![CDATA[Embedded]]></category>
		<category><![CDATA[Tutorial]]></category>

		<guid isPermaLink="false">http://blog.qt.io/?p=45122</guid>
		<description><![CDATA[<p>With Qt 5.7 for Device Creation we introduced a new piece of technology &#8211; an OSTree-based solution for Over-the-Air software updates for the whole software stack. For a more detailed introduction about this new component of the Boot to Qt software stack, read part one of the blog post series. This blog post contains a</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/06/28/over-the-air-updates-part-2-device-integration-api-and-creating-updates/">Over-the-Air Updates, Part 2: Device Integration, API and Creating Updates</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>With <a href="http://www.qt.io/qt-for-device-creation/">Qt 5.7 for Device Creation</a> we introduced a new piece of technology &#8211; an OSTree-based solution for Over-the-Air software updates for the whole software stack. For a more detailed introduction about this new component of the Boot to Qt software stack, read <a href="https://blog.qt.io/blog/2016/05/31/over-the-air-updates-part-1-introduction/">part one</a> of the blog post series. This blog post contains a step-by-step guide on how to add OTA update capability to your Boot to Qt device, discusses Qt OTA API and finally demonstrates how to generate OTA updates for shipped devices.<br />
<span id="more-45122"></span></p>
<h3>Device Selection.</h3>
<p></p>
<p>For this tutorial we are going to use the <a href="http://www.intel.com/content/www/us/en/nuc/nuc-de3815tykhe-de3815tybe-brief.html">Intel NUC</a> board &#8211; a new reference device in Qt 5.7 for Device Creation. Intel NUC is a low-cost, pint-sized powerhouse solution for a wide variety of fields, including Internet of Things where OTA update capability is especially desired. I chose this board for the tutorial because it is not your traditional ARM-based embedded Linux board that uses the U-Boot bootloader. Instead, Intel NUC is a x86-64 target with the GRUB 2 bootloader. The OTA solution in Technology Preview supports U-Boot and GRUB 2 bootloaders, and adding support for additional bootloaders is a straightforward task (as long as a bootloader has the means to read from an external configuration file).</p>
<h3>Device Integration Steps.</h3>
<p>I won&#8217;t go into too much detail at each step, as that is already covered in the OTA <a href="http://doc.qt.io/QtOTA/">documentation</a>. The goal of this tutorial is to show the necessary steps to add OTA capability to a device and to demonstrate that it doesn&#8217;t require months of effort to add such a capability. Rather, it takes just a few hours when using the OTA solution from Qt for Device Creation.</p>
<h5>1. Generate OSTree boot compatible initramfs image.</h5>
<p></p>
<p>This step requires booting the device with the <em>sysroot to be released</em>, so that the tool can generate initramfs that match the kernel version of the release. The device has to be connected to the machine from which you will run the <code>generate-initramfs</code> tool:</p>
<p><code>SDK_INSTALL_DIR/Tools/ota/dracut/generate-initramfs</code></p>
<h5>2. Bootloader integration.</h5>
<p></p>
<p>This is the only step that requires manual work. The bootscript used by your device has to be changed to use the configurations that are managed by OSTree. This will ensure that, after OTA updates or rollbacks, the correct kernel version (and corresponding boot files) will be selected at boot time. On U-Boot systems this requires sourcing <code>uEnv.txt</code> and then integrating the imported environment with the bootscript. On GRUB 2 systems, whenever the bootloader configuration files need to be updated, OSTree executes the <code>ostree-grub-generator</code> shell script to convert bootloader-independent configuration files into native <code>grub.cfg</code> format. A default <code>ostree-grub-generator</code> script can be found in the following path:</p>
<p><code>SDK_INSTALL_DIR/Tools/ota/qt-ostree/ostree-grub-generator</code></p>
<p>This script should be sufficient for most use cases, but feel free to modify it. The <code>ostree-grub-generator</code> file contains additional details. The script itself is about 40 lines long.</p>
<h5>3. Convert your sysroot into an OTA enabled sysroot.</h5>
<p></p>
<p>The conversion is done using the <code>qt-ostree</code> tool.</p>
<p><code>sudo ./qt-ostree \<br />
--sysroot-image-path ${PATH_TO_SYSROOT} \<br />
--create-ota-sysroot \<br />
--ota-json ${OTA_METADATA} \<br />
--initramfs ../dracut/initramfs-${device}-${release} \<br />
--grub2-cfg-generator ${CUSTOM_GENERATOR}<br />
</code></p>
<p>This script will do all the necessary work to convert your sysroot into an OTA enabled sysroot. The <code>${OTA_METADATA}</code> is a JSON file containing the system&#8217;s metadata. The following top-level fields have convenience methods in the Qt/QML OTA API: <code>version</code> and <code>description</code>. The API provides the means of manually fetching and parsing the file (which consequently can contain arbitrary metadata describing the sysroot).</p>
<h5>4. Deploy the generated OTA image to an SD card.</h5>
<p></p>
<p><code>sudo dd bs=4M if=&lt;image&gt; of=/dev/&lt;device_name&gt; &amp;&amp; sync</code></p>
<h5>5. Test that everything went according to plan.</h5>
<p></p>
<p>Boot from the SD card and run the following command from the device:</p>
<p><code>ostree admin status</code></p>
<p>The output should be something similar to:</p>
<p><code>* qt-os 36524faa47e33da9dbded2ff99d1df47b3734427b94c8a11e062314ed31442a7.0<br />
    origin refspec: qt-os:linux/qt<br />
</code></p>
<p>Congratulations! Now the device can perform full system updates via a wireless network. Updates and rollbacks are atomic and the update process can safely be interrupted without leaving the system in an inconsistent state. If an update did not fully complete, for example due to a power failure, the device will boot into an unmodified system. Read about the other features of the update system in the OTA <a href="http://doc.qt.io/QtOTA/">documentation</a>.</p>
<h3>User Space Integration.</h3>
<p></p>
<p>With the device being OTA capable, we need to take advantage of that. We provide <a href="http://doc.qt.io/QtOTA/qtotaupdate-module.html">C++</a> / <a href="http://doc.qt.io/QtOTA/qtotaupdate-qmlmodule.html">QML</a> APIs to make OTA update functionality integration with Qt-based applications a breeze. Offline operations include querying the booted and rollback system version details and atomically performing the rollbacks. Online operations include fetching a new system version from a remote server and atomically performing system updates. A basic example that demonstrates the API:</p>
<pre class="brush:cpp">
Label { text: "CLIENT:"; }
Label { text: "Version: " + OTAClient.clientVersion }
Label { text: "Description: " + OTAClient.clientDescription }
Label { text: "Revision: " + OTAClient.clientRevision }

Label { text: "SERVER:"; }
Label { text: "Version: " + OTAClient.serverVersion }
Label { text: "Description: " + OTAClient.serverDescription }
Label { text: "Revision: " + OTAClient.serverRevision }

Label { text: "ROLLBACK:"; }
Label { text: "Version: " + OTAClient.rollbackVersion }
Label { text: "Description: " + OTAClient.rollbackDescription }
Label { text: "Revision: " + OTAClient.rollbackRevision }

RowLayout {
    Button {
        text: "Fetch OTA info"
        onClicked: OTAClient.fetchServerInfo()
    }
    Button {
        visible: OTAClient.rollbackAvailable
        text: "Rollback"
        onClicked: OTAClient.rollback()
    }
    Button {
        visible: OTAClient.updateAvailable
        text: "Update"
        onClicked: OTAClient.update()
    }
    Button {
        visible: OTAClient.restartRequired
        text: "Restart"
        onClicked: log("Restarting...")
    }
}
</pre>
<p>The above sample presents version information for the booted and rollback system, as well as what system version is available on a remote server. The sample program also contains buttons to initiate OTA tasks. The code below is used for logging OTA events. The API is still in Technology Preview, so the final version might have slight changes.</p>
<pre class="brush:cpp">
Connections {
    target: OTAClient
    onErrorChanged: log(error)
    onStatusChanged: log(status)
    onInitializationFinished: log("Initialization " + (OTAClient.initialized ? "finished" : "failed"))
    onFetchServerInfoFinished: {
        log("FetchServerInfo " + (success ? "finished" : "failed"))
        if (success)
            log("Update available: " + OTAClient.updateAvailable)
    }
    onRollbackFinished: log("Rollback " + (success ? "finished" : "failed"))
    onUpdateFinished: log("Update " + (success ? "finished" : "failed"))
}
</pre>
<p>This API could easily be used to write a daemon that communicates its version details to the server and the daemon could send a notification to the user when an update becomes available. The server could send out updates in batches, first updating a small subset of devices for field testing, fetching update statuses from daemons and if there are no issues, update the remaining devices. Some tools for this type of tasks are in the roadmap of OTA solution for the Boot to Qt stack.</p>
<h3>Ship it! Some time later &#8230; a critical bug emerges.</h3>
<p></p>
<p>As we took a precaution and built an embedded device with OTA capability as well as creating a Qt application for handling updates, there are only few simple steps to follow to resolve the issue.</p>
<h5>1. Fix the bug.</h5>
<p></p>
<p>I will leave the details up to you 😉 We will use the updated sysroot in the next step.</p>
<h5>2. Generate an update.</h5>
<p></p>
<p>This is done by using the <code>qt-ostree</code> tool. Generating an OTA update is a completely automated task.</p>
<p><code>sudo ./qt-ostree \<br />
--sysroot-image-path ${PATH_TO_SYSROOT_WITH_THE_FIX} \<br />
--ota-json ${OTA_METADATA_DESCRIBING_NEW_SYSROOT} \<br />
--initramfs ../dracut/initramfs-${device}-${release}<br />
</code></p>
<p>The above command will create a new commit in the OSTree repository at WORKDIR/ostree-repo/, or create a new repository if one does not exist. This <em>repository is the OTA update</em> and can be exported to a production server at any time. OSTree repositories can be served via a static HTTP server (more on this in the next blog post).</p>
<h5>3. Use Qt OTA API to update devices.</h5>
<p></p>
<p>It is up to system builders to choose an update strategy.</p>
<h3>Availability</h3>
<p></p>
<p>The Boot to Qt project leverages <a href="https://www.yoctoproject.org/">The Yocto Project</a> to built its own distribution layer called <a href="http://code.qt.io/cgit/yocto/meta-boot2qt.git/">meta-boot2qt</a>. The Boot to Qt distribution combines the vendor specific BSP layers and <a href="http://code.qt.io/cgit/yocto/meta-qt5.git/">meta-qt5</a> into one package. This distribution is optimized to make the integration with the <a href="http://code.qt.io/cgit/qt/qtotaupdate.git/">OTA tooling</a> as simple as possible. All source code is available under commercial and GPL licenses.</p>
<h3>Conclusion</h3>
<p></p>
<p>Enabling the OTA update feature on Boot to Qt devices is a quick and worthwhile task. With OTA enabled devices you can ship your products early and provide more features later on. In the next blog post I will write about OSTree (OTA update) repository handling, remote configuration and security.</p>
<p>The post <a rel="nofollow" href="http://blog.qt.io/blog/2016/06/28/over-the-air-updates-part-2-device-integration-api-and-creating-updates/">Over-the-Air Updates, Part 2: Device Integration, API and Creating Updates</a> appeared first on <a rel="nofollow" href="http://blog.qt.io">Qt Blog</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Page Caching using disk: enhanced
Content Delivery Network via Amazon Web Services: CloudFront: d33763z96x0wep.cloudfront.net

 Served from: blog.qt.io @ 2016-10-26 12:48:26 by W3 Total Cache -->